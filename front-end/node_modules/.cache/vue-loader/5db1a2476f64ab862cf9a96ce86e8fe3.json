{"remainingRequest":"D:\\Project_Mirea\\risk-box\\front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Project_Mirea\\risk-box\\front-end\\src\\components\\commons\\perfect-table\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Project_Mirea\\risk-box\\front-end\\src\\components\\commons\\perfect-table\\index.vue","mtime":1556591576353},{"path":"D:\\Project_Mirea\\risk-box\\front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1556556018404},{"path":"D:\\Project_Mirea\\risk-box\\front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1556555986820},{"path":"D:\\Project_Mirea\\risk-box\\front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1556556018404},{"path":"D:\\Project_Mirea\\risk-box\\front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1556556019204}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport _ from 'lodash';\r\nimport TableDragger from 'table-dragger';\r\nimport CheckBox from './checkbox';\r\n\r\nimport { FILTER_ULTIS } from './filter-compare';\r\nimport PERFECT_TABLE_FILTER_OPERATIONS from './filter-operations';\r\nimport {\r\n  PERFECT_TABLE_HOVER_COLOR,\r\n  MENU_CONTROLS,\r\n  PERFECT_TABLE_ACTION_SCOPE,\r\n  PERFECT_TABLE_PAGE_SIZE,\r\n  PERFECT_TABLE_FILTER_TYPES\r\n} from './table-constants';\r\n\r\nexport default {\r\n  components: {\r\n    CheckBox\r\n  },\r\n\r\n  props: {\r\n    value: {\r\n      type: Array,\r\n      default: () => {\r\n        return [];\r\n      }\r\n    },\r\n\r\n    headers: {\r\n      type: Object,\r\n      default: () => {\r\n        return {};\r\n      }\r\n    },\r\n\r\n    custom: {\r\n      type: Object,\r\n      default: () => {\r\n        return {};\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Filter configuration structure\r\n     * {\r\n     *    a: 'STRING',\r\n     *    b: 'string',\r\n     *    c: 'BOOL',\r\n     *    d: 'bool',\r\n     *    e: 'NUMBER',\r\n     *    f: 'number',\r\n     *    g: 'DATE'\r\n     *    h: {\r\n     *      type: 'date',\r\n     *      width: '100px',\r\n     *      alias: '<NAME FOR SHOWN UP>'\r\n     *    }\r\n     * }\r\n     */\r\n    filter: {\r\n      type: Object,\r\n      default: () => {\r\n        return {};\r\n      }\r\n    }\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      table_id: `${new Date().getTime()}`,\r\n      reload: `${new Date().getTime()}`,\r\n\r\n      columns: [],\r\n\r\n      data_table: [],\r\n\r\n      options: {\r\n        key: null,\r\n\r\n        sortable: [],\r\n        hiddens: [],\r\n        editables: [],\r\n\r\n        autoNo: false,\r\n        checker: false,\r\n        dragable: false,\r\n\r\n        outline: true,\r\n        center: [],\r\n        decorates: {\r\n          text: {},\r\n          class: {},\r\n          default: '',\r\n          hover: _.assign(_.cloneDeep(PERFECT_TABLE_HOVER_COLOR), {\r\n            only_cell: false\r\n          })\r\n        },\r\n\r\n        fixed_row_page: false,\r\n        fixed_page: false,\r\n        page_size: PERFECT_TABLE_PAGE_SIZE,\r\n        footer_autohidden: false,\r\n\r\n        actions: {}\r\n      },\r\n\r\n      pagination: {\r\n        rowsPerPage: 5,\r\n        page: 1,\r\n        totalItems: this.value.length\r\n      },\r\n\r\n      actions: {\r\n        row: [],\r\n        global: [],\r\n        click: []\r\n      },\r\n\r\n      all_check: false,\r\n      map_checkbox: {},\r\n\r\n      filter_options: {\r\n        turn_on: false,\r\n        state: false\r\n      },\r\n      search_map: {},\r\n      choose_model: {\r\n        show: false,\r\n        x: 0,\r\n        y: 0,\r\n        column: '',\r\n        current: {},\r\n        operations: []\r\n      },\r\n\r\n      menu_context: {\r\n        show: false,\r\n        x: 0,\r\n        y: 0,\r\n        target_col: '',\r\n        target_record: {},\r\n        options: []\r\n      }\r\n    };\r\n  },\r\n\r\n  computed: {\r\n    calcTotalPage() {\r\n      let total = _.floor(\r\n        this.pagination.totalItems / this.pagination.rowsPerPage\r\n      );\r\n      if (this.pagination.totalItems % this.pagination.rowsPerPage > 0) {\r\n        total++;\r\n      }\r\n      return total;\r\n    },\r\n\r\n    computedEmptyRow() {\r\n      let lastRows = this.data_table.length % this.pagination.rowsPerPage;\r\n      return this.pagination.rowsPerPage - lastRows;\r\n    }\r\n  },\r\n\r\n  watch: {\r\n    value() {\r\n      this.data_table = _.cloneDeep(this.value);\r\n      this.filtering();\r\n      this.loadCheckbox();\r\n    },\r\n\r\n    data_table: {\r\n      handler() {\r\n        this.pagination.totalItems = this.data_table.length;\r\n        for (let i in this.data_table) {\r\n          let row = this.data_table[i];\r\n          row.$no = Number(i) + 1;\r\n          if (_.isNil(row[this.options.key])) {\r\n            throw new TypeError(`Data is not valid [${JSON.stringify(row)}]`);\r\n          }\r\n\r\n          let index = _.findIndex(this.value, {\r\n            [this.options.key]: row[this.options.key]\r\n          });\r\n          _.assign(this.value[index], this.removeControlCol(row));\r\n        }\r\n      },\r\n      deep: true\r\n    },\r\n\r\n    'filter_options.state': {\r\n      handler() {\r\n        if (this.filter_options.state) {\r\n          this.filtering();\r\n        } else {\r\n          this.data_table = _.cloneDeep(this.value);\r\n        }\r\n      },\r\n      deep: true\r\n    },\r\n\r\n    'pagination.rowsPerPage': {\r\n      handler() {\r\n        if (this.calcTotalPage == 0) {\r\n          this.pagination.page = 1;\r\n        } else if (this.pagination.page > this.calcTotalPage) {\r\n          this.pagination.page = this.calcTotalPage;\r\n        }\r\n        this.reloadCheckbox();\r\n      },\r\n      deep: true\r\n    },\r\n\r\n    'pagination.page': {\r\n      handler() {\r\n        this.reloadCheckbox();\r\n      },\r\n      deep: true\r\n    }\r\n  },\r\n\r\n  created() {\r\n    this.mergeConfigs();\r\n    this.readColumns();\r\n    this.data_table = _.cloneDeep(this.value);\r\n    this.loadCheckbox();\r\n    this.readFilterOptions();\r\n    this.loadActions();\r\n    this.loadPaging();\r\n  },\r\n\r\n  updated() {\r\n    this.$nextTick(() => {\r\n      if (this.data_table.length > 0) {\r\n        this.tableDragable();\r\n      }\r\n    });\r\n  },\r\n\r\n  methods: {\r\n    mergeConfigs() {\r\n      _.assignIn(this.options.decorates, this.custom.decorates);\r\n      let custom = _.omit(this.custom, 'decorates');\r\n      _.assignIn(this.options, custom);\r\n    },\r\n\r\n    readColumns() {\r\n      if (_.isNil(this.options.key)) {\r\n        throw new TypeError('Please provide a valid column name as KEY');\r\n      }\r\n\r\n      this.pagination.sortBy = this.options.key;\r\n\r\n      if (_.isBoolean(this.options.checker) && this.options.checker) {\r\n        this.columns.push({\r\n          text: 'Checker',\r\n          align: 'center',\r\n          value: '$checker',\r\n          width: '50px'\r\n        });\r\n        this.menu_context.options.push({});\r\n        this.checkPermission();\r\n      }\r\n\r\n      this.columns.push({\r\n        text: 'global.table.columns.no',\r\n        align: 'center',\r\n        sortable: true,\r\n        value: '$no',\r\n        width: '50px'\r\n      });\r\n\r\n      if (_.isBoolean(this.options.autoNo) && !this.options.autoNo) {\r\n        this.options.hiddens.push('$no');\r\n      }\r\n      if (!_.isEmpty(this.headers)) {\r\n        for (let column in this.headers) {\r\n          if (\r\n            !_.isEmpty(this.options.hiddens) &&\r\n            _.includes(this.options.hiddens, column)\r\n          ) {\r\n            continue;\r\n          }\r\n          let editable = _.includes(this.options.editables, column);\r\n          this.columns.push({\r\n            text: this.headers[column],\r\n            align: this.isTextCenter(column),\r\n            sortable: this.isSortable(column),\r\n            editable,\r\n            value: column,\r\n            width: this.calcWidthColumn(column),\r\n            alias: this.retrieveAlias(column)\r\n          });\r\n        }\r\n      }\r\n    },\r\n\r\n    checkPermission() {\r\n      navigator.permissions.query({ name: 'clipboard-write' }).then(result => {\r\n        if (result.state == 'granted' || result.state == 'prompt') {\r\n          this.menu_context.options = _.concat(\r\n            this.menu_context.options,\r\n            MENU_CONTROLS.COPY_INTO_CLIPBORAD()\r\n          );\r\n        }\r\n      });\r\n    },\r\n\r\n    loadCheckbox(value) {\r\n      if (_.isBoolean(this.options.checker) && this.options.checker) {\r\n        for (let index in this.value) {\r\n          let el = this.value[index];\r\n          let keyRow = el[this.options.key];\r\n\r\n          this.map_checkbox[keyRow] = _.isBoolean(value) ? value : false;\r\n          this.selectRow(this.map_checkbox[keyRow], keyRow, null, true);\r\n        }\r\n      }\r\n    },\r\n\r\n    reloadCheckbox() {\r\n      if (!_.isBoolean(this.options.checker) || !this.options.checker) return;\r\n      this.$nextTick(() => {\r\n        this.data_table.forEach(el => {\r\n          let key = el[this.options.key];\r\n          this.$bus.$emit(\r\n            `select_${key}_${this.table_id}`,\r\n            this.map_checkbox[key]\r\n          );\r\n        });\r\n      });\r\n    },\r\n\r\n    selectAll(select) {\r\n      if (_.isBoolean(select) && !select) {\r\n        this.all_check = false;\r\n        this.$emit('choosing', []);\r\n      } else {\r\n        this.$emit('choosing', this.collectSelectedRow(true));\r\n      }\r\n      for (let key in this.map_checkbox) {\r\n        this.map_checkbox[key] = this.all_check;\r\n      }\r\n      this.$bus.$emit(`select_all_${this.table_id}`, this.all_check);\r\n    },\r\n\r\n    selectRow(val, key, isStop, isIgonre) {\r\n      this.map_checkbox[key] = val;\r\n      this.reload = `${new Date().getTime()}`;\r\n      var isAll = true;\r\n      _.forIn(this.map_checkbox, val => {\r\n        if (!val) {\r\n          isAll = false;\r\n        }\r\n      });\r\n      this.all_check = isAll;\r\n      if (_.isNil(isStop)) {\r\n        this.$bus.$emit(`select_${key}_${this.table_id}`, val);\r\n      }\r\n\r\n      if (_.isNil(isIgonre)) {\r\n        this.$emit('choosing', this.collectSelectedRow());\r\n      }\r\n    },\r\n\r\n    collectSelectedRow(isAll) {\r\n      if (isAll) {\r\n        if (this.all_check) {\r\n          return _.cloneDeep(this.data_table);\r\n        } else {\r\n          return [];\r\n        }\r\n      } else {\r\n        let result = [];\r\n        for (let key in this.map_checkbox) {\r\n          if (this.map_checkbox[key]) {\r\n            let record = _.find(this.data_table, { [this.options.key]: key });\r\n            result.push(record);\r\n          }\r\n        }\r\n        return result;\r\n      }\r\n    },\r\n\r\n    readFilterOptions() {\r\n      if (_.isObject(this.filter) && !_.isEmpty(this.filter)) {\r\n        this.filter_options.turn_on = true;\r\n        let filterCols = _.keys(this.filter).filter(\r\n          key =>\r\n            !_.isNil(this.headers[key]) &&\r\n            !_.includes(this.options.hiddens, key)\r\n        );\r\n        filterCols.forEach(column => {\r\n          let type = this.validFilterTypes(this.filter[column]);\r\n          this.search_map[column] = {\r\n            value: null,\r\n            key: this.options.key,\r\n            type,\r\n            column,\r\n            results: [],\r\n            operation: PERFECT_TABLE_FILTER_OPERATIONS.DEFAULTS[type]\r\n          };\r\n        });\r\n      }\r\n    },\r\n\r\n    loadActions() {\r\n      if (_.isBoolean(this.options.dragable) && this.options.dragable) {\r\n        this.columns = _.concat(\r\n          {\r\n            text: '',\r\n            align: 'center',\r\n            sortable: false,\r\n            value: '$drag_row',\r\n            width: '20px'\r\n          },\r\n          this.columns\r\n        );\r\n      }\r\n      if (!_.isNil(this.options.actions) && !_.isEmpty(this.options.actions)) {\r\n        this.columns.push({\r\n          text: 'global.table.columns.action',\r\n          align: 'center',\r\n          sortable: false,\r\n          value: '$actions'\r\n        });\r\n\r\n        for (let key in this.options.actions) {\r\n          let action = this.options.actions[key];\r\n\r\n          // action.callback = this.handleAction(key, action.callback);\r\n          if (_.isString(action.scope)) {\r\n            switch (action.scope) {\r\n              case PERFECT_TABLE_ACTION_SCOPE.RECORD:\r\n                this.actions.row.push(action);\r\n                break;\r\n              case PERFECT_TABLE_ACTION_SCOPE.GLOBAL:\r\n                this.actions.global.push(action);\r\n                break;\r\n              case PERFECT_TABLE_ACTION_SCOPE.CLICK.ROW:\r\n                this.actions.click.push(action);\r\n                break;\r\n              case PERFECT_TABLE_ACTION_SCOPE.CLICK.CELL:\r\n                if (\r\n                  _.isString(action.target) &&\r\n                  (_.startsWith(action.target, '$') ||\r\n                    _.isNil(this.headers[action.target]))\r\n                ) {\r\n                  break;\r\n                }\r\n                this.actions.click.push(action);\r\n                break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    callback(action, record, event) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n\r\n      record = this.removeControlCol(record);\r\n      action.callback(record[this.options.key], record, event);\r\n    },\r\n\r\n    handleEvent(record, col, event, rightClick) {\r\n      let key = record[this.options.key];\r\n      event.preventDefault();\r\n      if (rightClick) {\r\n        this.menu_context.show = false;\r\n        this.menu_context.x = event.clientX;\r\n        this.menu_context.y = event.clientY;\r\n        this.menu_context.target_col = col;\r\n        this.menu_context.target_record = record;\r\n\r\n        if (_.isBoolean(this.options.checker) && this.options.checker) {\r\n          let option = MENU_CONTROLS.SELECT_ROW();\r\n          if (this.map_checkbox[key]) {\r\n            option = MENU_CONTROLS.UNSELECT_ROW();\r\n          }\r\n          this.menu_context.options[0] = option;\r\n        }\r\n\r\n        this.$nextTick(() => {\r\n          if (this.menu_context.options.length == 0) return;\r\n          this.menu_context.show = true;\r\n        });\r\n      } else {\r\n        let result = { data: _.omit(record, '$no') };\r\n        result[this.options.key] = key;\r\n\r\n        for (let index in this.actions.click) {\r\n          let action = this.actions.click[index];\r\n          if (action.scope == PERFECT_TABLE_ACTION_SCOPE.CLICK.CELL) {\r\n            result.target = col;\r\n            result.target_value = record[col];\r\n\r\n            if (\r\n              _.startsWith(col, '$') ||\r\n              (!_.isNil(action.target) && action.target !== col)\r\n            ) {\r\n              continue;\r\n            }\r\n          }\r\n          action.callback(result, event);\r\n        }\r\n      }\r\n    },\r\n\r\n    menuContextAction(code) {\r\n      let record = this.removeControlCol(this.menu_context.target_record);\r\n      let key = record[this.options.key];\r\n      switch (code) {\r\n        case 'COPY_CELL':\r\n          if (_.startsWith(this.menu_context.target_col, '$')) {\r\n            this.copyToClipBoard(null);\r\n          } else {\r\n            this.copyToClipBoard(record[this.menu_context.target_col]);\r\n          }\r\n          break;\r\n        case 'COPY_ROW':\r\n          this.copyToClipBoard(JSON.stringify(record));\r\n          break;\r\n        case 'SELECT_ROW':\r\n          this.selectRow(!this.map_checkbox[key], key);\r\n          break;\r\n      }\r\n    },\r\n\r\n    removeControlCol(record) {\r\n      let needRemove = [];\r\n      for (let key in record) {\r\n        if (_.startsWith(key, '$')) {\r\n          needRemove.push(key);\r\n        }\r\n      }\r\n      return _.omit(record, needRemove);\r\n    },\r\n\r\n    copyToClipBoard(data) {\r\n      navigator.permissions.query({ name: 'clipboard-write' }).then(result => {\r\n        if (result.state == 'granted' || result.state == 'prompt') {\r\n          if (_.isNil(data)) data = '<NO_DATA>';\r\n          navigator.clipboard.writeText(data);\r\n        }\r\n      });\r\n    },\r\n\r\n    tableDragable() {\r\n      if (_.isBoolean(this.options.dragable) && this.options.dragable) {\r\n        var dragger = TableDragger(this.$el.getElementsByTagName('table')[0], {\r\n          mode: 'row',\r\n          dragHandler: '.row_handle',\r\n          onlyBody: true,\r\n          animation: 300\r\n        });\r\n        dragger.on('drop', () => {});\r\n      }\r\n    },\r\n\r\n    openOperationList(column, event) {\r\n      event.preventDefault();\r\n      this.focusTextField(`filter_${column}`);\r\n\r\n      this.choose_model = {\r\n        show: false,\r\n        column,\r\n        current: this.search_map[column].operation,\r\n        operations:\r\n          PERFECT_TABLE_FILTER_OPERATIONS[this.search_map[column].type]\r\n      };\r\n      this.choose_model.x = event.clientX;\r\n      this.choose_model.y = event.clientY;\r\n      this.$nextTick(() => {\r\n        this.choose_model.show = true;\r\n      });\r\n    },\r\n\r\n    chooseOperation(column, choice, event) {\r\n      event.preventDefault();\r\n      this.focusTextField(`filter_${column}`);\r\n      let type = this.search_map[column].type;\r\n      this.search_map[column].operation =\r\n        PERFECT_TABLE_FILTER_OPERATIONS[type][choice];\r\n      this.filterColumnToResult(column);\r\n    },\r\n\r\n    filtering() {\r\n      if (!this.filter_options.turn_on) return;\r\n\r\n      _.forIn(this.search_map, (value, column) => {\r\n        this.filterColunm(column);\r\n      });\r\n      this.getResult();\r\n    },\r\n\r\n    filterColunm(column) {\r\n      let condition = this.search_map[column];\r\n      this.search_map[column].results = [];\r\n      if (!FILTER_ULTIS.ignore[condition.type](condition.value)) {\r\n        this.value.forEach(el => {\r\n          if (!_.isNil(el[column])) {\r\n            FILTER_ULTIS.filter(this.search_map[column], el);\r\n          }\r\n        });\r\n      }\r\n    },\r\n\r\n    filterColumnToResult(column) {\r\n      this.filterColunm(column);\r\n      this.getResult();\r\n    },\r\n\r\n    changeFilterController() {\r\n      this.filter_options.state = !this.filter_options.state;\r\n\r\n      if (this.filter_options.state) {\r\n        this.filtering();\r\n      } else {\r\n        this.cleanFilterCache();\r\n        this.data_table = _.cloneDeep(this.value);\r\n      }\r\n    },\r\n\r\n    cleanFilterCache() {\r\n      _.forIn(this.search_map, condition => {\r\n        condition.value = null;\r\n        condition.results = [];\r\n      });\r\n    },\r\n\r\n    getResult() {\r\n      let accepts = null;\r\n      _.forIn(this.search_map, filter => {\r\n        if (FILTER_ULTIS.ignore[filter.type](filter.value)) {\r\n          filter.results = [];\r\n        } else {\r\n          if (accepts == null) {\r\n            accepts = filter.results;\r\n            return;\r\n          }\r\n\r\n          accepts = _.intersection(accepts, filter.results);\r\n        }\r\n      });\r\n      if (accepts != null) {\r\n        this.data_table = this.value.filter(el =>\r\n          _.includes(accepts, el[this.options.key])\r\n        );\r\n      } else {\r\n        this.data_table = _.cloneDeep(this.value);\r\n      }\r\n\r\n      this.selectAll(false);\r\n      this.reloadCheckbox();\r\n    },\r\n\r\n    validFilterTypes(colType) {\r\n      if (_.isNil(colType)) return PERFECT_TABLE_FILTER_TYPES[0];\r\n      let ignoreCaseVal = '';\r\n      if (_.isObject(colType)) {\r\n        if (_.isNil(colType.type)) return PERFECT_TABLE_FILTER_TYPES[0];\r\n        else return _.toUpper(colType.type);\r\n      } else {\r\n        ignoreCaseVal = _.toUpper(colType);\r\n      }\r\n      if (PERFECT_TABLE_FILTER_TYPES.includes(ignoreCaseVal)) {\r\n        return ignoreCaseVal;\r\n      } else {\r\n        return PERFECT_TABLE_FILTER_TYPES[0];\r\n      }\r\n    },\r\n\r\n    loadCustomCss() {\r\n      let hexRegex = /^#([A-Fa-f0-9]{3}|[A-Fa-f0-9]{6})$/;\r\n      let options = _.cloneDeep(PERFECT_TABLE_HOVER_COLOR);\r\n\r\n      if (_.isNil(this.options.decorates)) {\r\n        this.options.decorates = {\r\n          hover: {\r\n            only_cell: false\r\n          }\r\n        };\r\n      } else if (_.isNil(this.options.decorates.hover)) {\r\n        this.options.decorates.hover = {\r\n          only_cell: false\r\n        };\r\n      } else {\r\n        let custom = _.cloneDeep(this.options.decorates.hover);\r\n        if (_.isString(custom.color) && hexRegex.test(custom.color)) {\r\n          options.COLOR = custom.color;\r\n        }\r\n        if (_.isString(custom.background) && hexRegex.test(custom.background)) {\r\n          options.BACKGROUND = custom.background;\r\n        }\r\n      }\r\n\r\n      return {\r\n        '--t-empty-row': PERFECT_TABLE_HOVER_COLOR.BACKGROUND,\r\n        '--t-hover-text': options.COLOR,\r\n        '--t-hover': options.BACKGROUND\r\n      };\r\n    },\r\n\r\n    hoverHandle(event, isHover) {\r\n      let el = event.target;\r\n\r\n      if (isHover) {\r\n        if (this.options.decorates.hover.only_cell) {\r\n          el.className = el.className.replace(' t-hover', '');\r\n        } else {\r\n          this.hoverRowHandle(el, isHover);\r\n        }\r\n      } else {\r\n        if (this.options.decorates.hover.only_cell) {\r\n          el.className += ' t-hover';\r\n        } else {\r\n          this.hoverRowHandle(el, isHover);\r\n        }\r\n      }\r\n    },\r\n\r\n    hoverRowHandle(el, isHover) {\r\n      let childs = Array.from(el.parentNode.children);\r\n      for (let index in childs) {\r\n        if (isHover) {\r\n          childs[index].className = childs[index].className.replace(\r\n            ' t-hover',\r\n            ''\r\n          );\r\n        } else {\r\n          childs[index].className += ' t-hover';\r\n        }\r\n      }\r\n    },\r\n\r\n    focusTextField(control) {\r\n      let component = this.$refs[control];\r\n      if (component != undefined && component[0] != undefined) {\r\n        let inputControl = component[0].$el.getElementsByTagName('input');\r\n        inputControl[0].focus();\r\n      }\r\n    },\r\n\r\n    ignoreHidden(headers) {\r\n      return headers.filter(\r\n        col =>\r\n          _.isEmpty(this.options.hiddens) ||\r\n          !_.includes(this.options.hiddens, col.value)\r\n      );\r\n    },\r\n\r\n    isSortable(col) {\r\n      return (\r\n        _.isArray(this.options.sortable) &&\r\n        _.includes(this.options.sortable, col)\r\n      );\r\n    },\r\n\r\n    isTextCenter(col) {\r\n      return _.isArray(this.options.center) &&\r\n        _.includes(this.options.center, col)\r\n        ? 'center'\r\n        : 'left';\r\n    },\r\n\r\n    calcWidthColumn(col) {\r\n      if (\r\n        !_.isNil(this.filter[col]) &&\r\n        _.isObject(this.filter[col]) &&\r\n        !_.isNil(this.filter[col].width)\r\n      ) {\r\n        return this.filter[col].width;\r\n      } else {\r\n        return '100px';\r\n      }\r\n    },\r\n\r\n    retrieveAlias(col) {\r\n      if (\r\n        _.isNil(this.filter) ||\r\n        _.isNil(this.filter[col]) ||\r\n        _.isNil(this.filter[col].alias)\r\n      )\r\n        return this.headers[col];\r\n\r\n      return this.filter[col].alias;\r\n    },\r\n\r\n    enableFilterCol(col) {\r\n      if (_.isNil(this.filter) || _.isNil(this.filter[col])) return false;\r\n\r\n      return true;\r\n    },\r\n\r\n    computedDecorateRow(record) {\r\n      this.reload ? true : false;\r\n\r\n      let key = record[this.options.key];\r\n      var result = [];\r\n      if (_.isBoolean(this.options.checker) && this.options.checker) {\r\n        if (this.map_checkbox[key]) {\r\n          result.push('t-hover');\r\n        }\r\n      }\r\n\r\n      if (\r\n        _.isNil(this.options.decorates.row) ||\r\n        !_.isArray(this.options.decorates.row)\r\n      ) {\r\n        return result;\r\n      }\r\n\r\n      this.options.decorates.row.forEach(el => {\r\n        if (_.isFunction(el.condition) && el.condition(record)) {\r\n          result.push(el.class);\r\n        }\r\n      });\r\n      return result;\r\n    },\r\n\r\n    showEmptyRow(index) {\r\n      index++;\r\n      return (\r\n        this.options.fixed_row_page &&\r\n        this.pagination.page == this.calcTotalPage &&\r\n        index == this.pagination.totalItems % this.pagination.rowsPerPage\r\n      );\r\n    },\r\n\r\n    holdFitlerControl(hover, column) {\r\n      let component = this.$refs[`filter_${column}`];\r\n      let isFocus = false;\r\n      if (component != undefined && component[0] != undefined) {\r\n        isFocus = component[0].isFocused;\r\n      }\r\n      let val = this.search_map[column].value;\r\n      if (val == '') {\r\n        this.search_map[column].value = null;\r\n      }\r\n\r\n      return hover || isFocus || this.search_map[column].value != null;\r\n    },\r\n\r\n    changeSort(sortable, column) {\r\n      if (this.filter_options.state && !_.isNil(this.search_map[column]))\r\n        return;\r\n\r\n      if (!sortable) return;\r\n      if (this.pagination.sortBy === column) {\r\n        this.pagination.descending = !this.pagination.descending;\r\n      } else {\r\n        this.pagination.sortBy = column;\r\n        this.pagination.descending = false;\r\n      }\r\n      this.reloadCheckbox();\r\n    },\r\n\r\n    computedCellValue(col, val) {\r\n      if (\r\n        _.isNil(this.options.decorates) ||\r\n        _.isNil(this.options.decorates.text) ||\r\n        _.isNil(this.options.decorates.text[col])\r\n      ) {\r\n        return val;\r\n      }\r\n      return this.options.decorates.text[col](val);\r\n    },\r\n\r\n    emptyField(col, val) {\r\n      if (!_.startsWith(col, '$') && _.isNil(val)) {\r\n        return {\r\n          background: '#fff5f5'\r\n        };\r\n      }\r\n      return {};\r\n    },\r\n\r\n    loadPaging() {\r\n      let headers = this.columns.filter(\r\n        col =>\r\n          _.isEmpty(this.options.hiddens) ||\r\n          !_.includes(this.options.hiddens, col.value)\r\n      );\r\n\r\n      if (_.isArray(this.options.page_size)) {\r\n        if (this.options.page_size.length == 0) {\r\n          this.options.page_size = PERFECT_TABLE_PAGE_SIZE;\r\n        } else if (this.options.page_size.length == 1) {\r\n          this.options.fixed_page = true;\r\n        }\r\n      } else {\r\n        this.options.page_size = PERFECT_TABLE_PAGE_SIZE;\r\n      }\r\n\r\n      this.pagination.rowsPerPage = this.options.page_size[0];\r\n\r\n      this.pagination.descending = false;\r\n      this.pagination.sortBy = this.options.key;\r\n      if (\r\n        !_.isEmpty(this.options.hiddens) &&\r\n        _.includes(this.options.hiddens, this.options.key)\r\n      ) {\r\n        if (_.isBoolean(this.options.autoNo) && this.options.autoNo) {\r\n          this.pagination.sortBy = '$no';\r\n        } else if (\r\n          _.isBoolean(this.options.dragable) &&\r\n          this.options.dragable\r\n        ) {\r\n          this.pagination.sortBy = headers.length > 1 ? headers[1].value : '';\r\n        } else {\r\n          this.pagination.sortBy = headers[0].value;\r\n        }\r\n      }\r\n\r\n      return headers;\r\n    }\r\n  }\r\n};\r\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAifile":"index.vue","sourceRoot":"src/components/commons/perfect-table","sourcesContent":["<template>\r\n  <div :style=\"loadCustomCss()\">\r\n    <div :class=\"['perfect_table', options.outline ? 'elevation-1' : '']\">\r\n      <v-data-table\r\n        :headers=\"columns\"\r\n        :items=\"data_table\"\r\n        :pagination.sync=\"pagination\"\r\n        :sort-icon=\"$vuetify.icons.SORT\"\r\n        hide-actions\r\n      >\r\n        <template slot=\"headers\" slot-scope=\"props\">\r\n          <tr>\r\n            <template v-for=\"header in ignoreHidden(props.headers)\">\r\n              <th v-if=\"header.value === '$checker'\" :key=\"header.text\">\r\n                <v-checkbox\r\n                  v-model=\"all_check\"\r\n                  :ripple=\"false\"\r\n                  height=\"24\"\r\n                  class=\"checker_col\"\r\n                  @change=\"selectAll\"\r\n                />\r\n              </th>\r\n\r\n              <v-hover\r\n                v-else-if=\"enableFilterCol(header.value)\"\r\n                :key=\"header.text\"\r\n              >\r\n                <th\r\n                  slot-scope=\"{ hover }\"\r\n                  :class=\"[\r\n                    'filter column px-2',\r\n                    header.sortable\r\n                      ? pagination.descending\r\n                        ? 'sortable desc'\r\n                        : 'sortable asc'\r\n                      : '',\r\n                    header.value === pagination.sortBy ? 'active' : '',\r\n                    header.align == 'center' ? 'text-xs-center' : 'text-xs-left'\r\n                  ]\"\r\n                  :style=\"{ 'min-width': header.width }\"\r\n                  @click=\"changeSort(header.sortable, header.value)\"\r\n                >\r\n                  {{ $t(header.text) }}\r\n                  <v-icon v-if=\"header.sortable\" small>\r\n                    {{ $vuetify.icons.SORT }}\r\n                  </v-icon>\r\n                  <v-expand-transition\r\n                    v-if=\"\r\n                      filter_options.state &&\r\n                        search_map[header.value] != undefined\r\n                    \"\r\n                  >\r\n                    <v-text-field\r\n                      v-show=\"holdFitlerControl(hover, header.value)\"\r\n                      :ref=\"`filter_${header.value}`\"\r\n                      v-model=\"search_map[header.value].value\"\r\n                      :label=\"header.text\"\r\n                      :prefix=\"`${header.alias}:`\"\r\n                      :append-icon=\"search_map[header.value].operation.icon\"\r\n                      solo\r\n                      class=\"filter_wrapper\"\r\n                      @input=\"filterColumnToResult(header.value)\"\r\n                      @click:append=\"openOperationList(header.value, $event)\"\r\n                    />\r\n                  </v-expand-transition>\r\n                </th>\r\n              </v-hover>\r\n\r\n              <th v-else :key=\"header.text\">{{ $t(header.text) }}</th>\r\n            </template>\r\n          </tr>\r\n        </template>\r\n        <template slot=\"items\" slot-scope=\"props\">\r\n          <tr :class=\"computedDecorateRow(props.item)\">\r\n            <td\r\n              v-for=\"col in ignoreHidden(columns)\"\r\n              :key=\"col.value\"\r\n              :style=\"emptyField(col.value, props.item[col.value])\"\r\n              :class=\"[\r\n                enableFilterCol(col.value) ? 'filter' : '',\r\n                options.decorates.default,\r\n                options.decorates.class[col.value] || '',\r\n                col.value == '$drag_row' ? 'row_handle' : '',\r\n                col.align == 'center' ? 'text-xs-center' : 'text-xs-left'\r\n              ]\"\r\n              @contextmenu=\"handleEvent(props.item, col.value, $event, true)\"\r\n              @click=\"handleEvent(props.item, col.value, $event, false)\"\r\n              @mouseenter=\"hoverHandle($event, false)\"\r\n              @mouseleave=\"hoverHandle($event, true)\"\r\n            >\r\n              <template v-if=\"col.value == '$drag_row'\">\r\n                <v-icon small>{{ $vuetify.icons.DRAG }}</v-icon>\r\n              </template>\r\n              <template v-else-if=\"col.value == '$checker'\">\r\n                <check-box\r\n                  :id=\"props.item[options.key]\"\r\n                  :key=\"props.item[options.key]\"\r\n                  :table=\"table_id\"\r\n                  class=\"checker_col\"\r\n                  @change=\"val => selectRow(val, props.item[options.key], true)\"\r\n                />\r\n              </template>\r\n              <template v-else-if=\"col.editable\">\r\n                <slot\r\n                  :record=\"props.item\"\r\n                  :column=\"col.value\"\r\n                  name=\"editable\"\r\n                />\r\n              </template>\r\n              <template v-else-if=\"col.value == '$actions'\">\r\n                <div class=\"layout justify-center\">\r\n                  <div\r\n                    v-for=\"(action, index) in actions.row\"\r\n                    :key=\"index\"\r\n                    :class=\"[\r\n                      'align-self-center',\r\n                      index < actions.row.length - 1 ? 'mr-2' : ''\r\n                    ]\"\r\n                  >\r\n                    <v-btn\r\n                      v-if=\"action.text != undefined\"\r\n                      small\r\n                      outline\r\n                      color=\"primary\"\r\n                      @click=\"callback(action, props.item, $event)\"\r\n                    >\r\n                      <v-icon\r\n                        v-if=\"action.icon != undefined\"\r\n                        small\r\n                        class=\"mr-2\"\r\n                      >\r\n                        {{ action.icon }}\r\n                      </v-icon>\r\n                      {{ action.text }}\r\n                    </v-btn>\r\n                    <v-icon\r\n                      v-else\r\n                      small\r\n                      :color=\"\r\n                        action.color != undefined ? action.color : 'primary'\r\n                      \"\r\n                      @click=\"callback(action, props.item, $event)\"\r\n                    >\r\n                      {{ action.icon }}\r\n                    </v-icon>\r\n                  </div>\r\n                </div>\r\n              </template>\r\n              <template v-else>\r\n                {{ computedCellValue(col.value, props.item[col.value]) }}\r\n              </template>\r\n            </td>\r\n          </tr>\r\n          <template v-if=\"showEmptyRow(props.index)\">\r\n            <template v-for=\"r in computedEmptyRow\">\r\n              <tr :key=\"r\" class=\"empty-row\">\r\n                <td colspan=\"100\" />\r\n              </tr>\r\n            </template>\r\n          </template>\r\n        </template>\r\n        <template slot=\"no-data\">\r\n          <template v-if=\"options.fixed_row_page\">\r\n            <tr v-for=\"r in pagination.rowsPerPage\" :key=\"r\" class=\"empty-row\">\r\n              <td\r\n                v-if=\"r == Math.floor(pagination.rowsPerPage / 2 + 0.5)\"\r\n                colspan=\"100\"\r\n              >\r\n                <v-layout align-center justify-center row fill-height>\r\n                  <div>{{ $t('global.table.message.no_data') }}</div>\r\n                </v-layout>\r\n              </td>\r\n              <td v-else colspan=\"100\" />\r\n            </tr>\r\n          </template>\r\n          <tr v-else>\r\n            <td class=\"empty-row\" colspan=\"100\">\r\n              <v-layout align-center justify-center row fill-height>\r\n                <div>{{ $t('global.table.message.no_data') }}</div>\r\n              </v-layout>\r\n            </td>\r\n          </tr>\r\n        </template>\r\n      </v-data-table>\r\n      <div\r\n        v-if=\"\r\n          !options.footer_autohidden ||\r\n            (!options.fixed_page || calcTotalPage > 1)\r\n        \"\r\n        class=\"table_footer px-4\"\r\n      >\r\n        <template v-if=\"!options.fixed_page\">\r\n          <div\r\n            v-if=\"filter_options.turn_on\"\r\n            class=\"inline mr-4 filtering_controller\"\r\n            @click=\"changeFilterController\"\r\n          >\r\n            <v-icon :color=\"filter_options.state ? 'primary' : '#b1b1b1'\">\r\n              fa-filter\r\n            </v-icon>\r\n          </div>\r\n          <div class=\"inline mr-4\">{{ $t('global.table.page_size') }}</div>\r\n          <div class=\"inline page_size\">\r\n            <v-select\r\n              v-model=\"pagination.rowsPerPage\"\r\n              :items=\"options.page_size\"\r\n            />\r\n          </div>\r\n        </template>\r\n        <div\r\n          v-if=\"!options.footer_autohidden || calcTotalPage > 1\"\r\n          class=\"pagging\"\r\n        >\r\n          <v-pagination\r\n            v-model=\"pagination.page\"\r\n            :length=\"calcTotalPage\"\r\n            :total-visible=\"5\"\r\n          ></v-pagination>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <v-menu\r\n      v-if=\"filter_options.turn_on\"\r\n      v-model=\"choose_model.show\"\r\n      :position-x=\"choose_model.x\"\r\n      :position-y=\"choose_model.y\"\r\n      transition=\"slide-y-transition\"\r\n      bottom\r\n      left\r\n      absolute\r\n    >\r\n      <v-list class=\"menu-v-list\">\r\n        <v-list-tile\r\n          v-for=\"(operation, key) in choose_model.operations\"\r\n          :key=\"key\"\r\n          avatar\r\n          @click=\"chooseOperation(choose_model.column, key, $event)\"\r\n        >\r\n          <v-list-tile-action>\r\n            <v-icon>{{ operation.icon }}</v-icon>\r\n          </v-list-tile-action>\r\n          <v-list-tile-content>\r\n            <v-list-tile-title>{{ operation.text }}</v-list-tile-title>\r\n          </v-list-tile-content>\r\n        </v-list-tile>\r\n      </v-list>\r\n    </v-menu>\r\n    <v-menu\r\n      v-model=\"menu_context.show\"\r\n      :position-x=\"menu_context.x\"\r\n      :position-y=\"menu_context.y\"\r\n      absolute\r\n      offset-y\r\n    >\r\n      <v-list class=\"menu-v-list\">\r\n        <v-list-tile\r\n          v-for=\"(item, index) in menu_context.options\"\r\n          :key=\"index\"\r\n          @click=\"menuContextAction(item.code)\"\r\n        >\r\n          <v-list-tile-action>\r\n            <v-icon>{{ item.icon }}</v-icon>\r\n          </v-list-tile-action>\r\n          <v-list-tile-content>\r\n            <v-list-tile-title>{{ $t(item.text) }}</v-list-tile-title>\r\n          </v-list-tile-content>\r\n        </v-list-tile>\r\n      </v-list>\r\n    </v-menu>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport _ from 'lodash';\r\nimport TableDragger from 'table-dragger';\r\nimport CheckBox from './checkbox';\r\n\r\nimport { FILTER_ULTIS } from './filter-compare';\r\nimport PERFECT_TABLE_FILTER_OPERATIONS from './filter-operations';\r\nimport {\r\n  PERFECT_TABLE_HOVER_COLOR,\r\n  MENU_CONTROLS,\r\n  PERFECT_TABLE_ACTION_SCOPE,\r\n  PERFECT_TABLE_PAGE_SIZE,\r\n  PERFECT_TABLE_FILTER_TYPES\r\n} from './table-constants';\r\n\r\nexport default {\r\n  components: {\r\n    CheckBox\r\n  },\r\n\r\n  props: {\r\n    value: {\r\n      type: Array,\r\n      default: () => {\r\n        return [];\r\n      }\r\n    },\r\n\r\n    headers: {\r\n      type: Object,\r\n      default: () => {\r\n        return {};\r\n      }\r\n    },\r\n\r\n    custom: {\r\n      type: Object,\r\n      default: () => {\r\n        return {};\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Filter configuration structure\r\n     * {\r\n     *    a: 'STRING',\r\n     *    b: 'string',\r\n     *    c: 'BOOL',\r\n     *    d: 'bool',\r\n     *    e: 'NUMBER',\r\n     *    f: 'number',\r\n     *    g: 'DATE'\r\n     *    h: {\r\n     *      type: 'date',\r\n     *      width: '100px',\r\n     *      alias: '<NAME FOR SHOWN UP>'\r\n     *    }\r\n     * }\r\n     */\r\n    filter: {\r\n      type: Object,\r\n      default: () => {\r\n        return {};\r\n      }\r\n    }\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      table_id: `${new Date().getTime()}`,\r\n      reload: `${new Date().getTime()}`,\r\n\r\n      columns: [],\r\n\r\n      data_table: [],\r\n\r\n      options: {\r\n        key: null,\r\n\r\n        sortable: [],\r\n        hiddens: [],\r\n        editables: [],\r\n\r\n        autoNo: false,\r\n        checker: false,\r\n        dragable: false,\r\n\r\n        outline: true,\r\n        center: [],\r\n        decorates: {\r\n          text: {},\r\n          class: {},\r\n          default: '',\r\n          hover: _.assign(_.cloneDeep(PERFECT_TABLE_HOVER_COLOR), {\r\n            only_cell: false\r\n          })\r\n        },\r\n\r\n        fixed_row_page: false,\r\n        fixed_page: false,\r\n        page_size: PERFECT_TABLE_PAGE_SIZE,\r\n        footer_autohidden: false,\r\n\r\n        actions: {}\r\n      },\r\n\r\n      pagination: {\r\n        rowsPerPage: 5,\r\n        page: 1,\r\n        totalItems: this.value.length\r\n      },\r\n\r\n      actions: {\r\n        row: [],\r\n        global: [],\r\n        click: []\r\n      },\r\n\r\n      all_check: false,\r\n      map_checkbox: {},\r\n\r\n      filter_options: {\r\n        turn_on: false,\r\n        state: false\r\n      },\r\n      search_map: {},\r\n      choose_model: {\r\n        show: false,\r\n        x: 0,\r\n        y: 0,\r\n        column: '',\r\n        current: {},\r\n        operations: []\r\n      },\r\n\r\n      menu_context: {\r\n        show: false,\r\n        x: 0,\r\n        y: 0,\r\n        target_col: '',\r\n        target_record: {},\r\n        options: []\r\n      }\r\n    };\r\n  },\r\n\r\n  computed: {\r\n    calcTotalPage() {\r\n      let total = _.floor(\r\n        this.pagination.totalItems / this.pagination.rowsPerPage\r\n      );\r\n      if (this.pagination.totalItems % this.pagination.rowsPerPage > 0) {\r\n        total++;\r\n      }\r\n      return total;\r\n    },\r\n\r\n    computedEmptyRow() {\r\n      let lastRows = this.data_table.length % this.pagination.rowsPerPage;\r\n      return this.pagination.rowsPerPage - lastRows;\r\n    }\r\n  },\r\n\r\n  watch: {\r\n    value() {\r\n      this.data_table = _.cloneDeep(this.value);\r\n      this.filtering();\r\n      this.loadCheckbox();\r\n    },\r\n\r\n    data_table: {\r\n      handler() {\r\n        this.pagination.totalItems = this.data_table.length;\r\n        for (let i in this.data_table) {\r\n          let row = this.data_table[i];\r\n          row.$no = Number(i) + 1;\r\n          if (_.isNil(row[this.options.key])) {\r\n            throw new TypeError(`Data is not valid [${JSON.stringify(row)}]`);\r\n          }\r\n\r\n          let index = _.findIndex(this.value, {\r\n            [this.options.key]: row[this.options.key]\r\n          });\r\n          _.assign(this.value[index], this.removeControlCol(row));\r\n        }\r\n      },\r\n      deep: true\r\n    },\r\n\r\n    'filter_options.state': {\r\n      handler() {\r\n        if (this.filter_options.state) {\r\n          this.filtering();\r\n        } else {\r\n          this.data_table = _.cloneDeep(this.value);\r\n        }\r\n      },\r\n      deep: true\r\n    },\r\n\r\n    'pagination.rowsPerPage': {\r\n      handler() {\r\n        if (this.calcTotalPage == 0) {\r\n          this.pagination.page = 1;\r\n        } else if (this.pagination.page > this.calcTotalPage) {\r\n          this.pagination.page = this.calcTotalPage;\r\n        }\r\n        this.reloadCheckbox();\r\n      },\r\n      deep: true\r\n    },\r\n\r\n    'pagination.page': {\r\n      handler() {\r\n        this.reloadCheckbox();\r\n      },\r\n      deep: true\r\n    }\r\n  },\r\n\r\n  created() {\r\n    this.mergeConfigs();\r\n    this.readColumns();\r\n    this.data_table = _.cloneDeep(this.value);\r\n    this.loadCheckbox();\r\n    this.readFilterOptions();\r\n    this.loadActions();\r\n    this.loadPaging();\r\n  },\r\n\r\n  updated() {\r\n    this.$nextTick(() => {\r\n      if (this.data_table.length > 0) {\r\n        this.tableDragable();\r\n      }\r\n    });\r\n  },\r\n\r\n  methods: {\r\n    mergeConfigs() {\r\n      _.assignIn(this.options.decorates, this.custom.decorates);\r\n      let custom = _.omit(this.custom, 'decorates');\r\n      _.assignIn(this.options, custom);\r\n    },\r\n\r\n    readColumns() {\r\n      if (_.isNil(this.options.key)) {\r\n        throw new TypeError('Please provide a valid column name as KEY');\r\n      }\r\n\r\n      this.pagination.sortBy = this.options.key;\r\n\r\n      if (_.isBoolean(this.options.checker) && this.options.checker) {\r\n        this.columns.push({\r\n          text: 'Checker',\r\n          align: 'center',\r\n          value: '$checker',\r\n          width: '50px'\r\n        });\r\n        this.menu_context.options.push({});\r\n        this.checkPermission();\r\n      }\r\n\r\n      this.columns.push({\r\n        text: 'global.table.columns.no',\r\n        align: 'center',\r\n        sortable: true,\r\n        value: '$no',\r\n        width: '50px'\r\n      });\r\n\r\n      if (_.isBoolean(this.options.autoNo) && !this.options.autoNo) {\r\n        this.options.hiddens.push('$no');\r\n      }\r\n      if (!_.isEmpty(this.headers)) {\r\n        for (let column in this.headers) {\r\n          if (\r\n            !_.isEmpty(this.options.hiddens) &&\r\n            _.includes(this.options.hiddens, column)\r\n          ) {\r\n            continue;\r\n          }\r\n          let editable = _.includes(this.options.editables, column);\r\n          this.columns.push({\r\n            text: this.headers[column],\r\n            align: this.isTextCenter(column),\r\n            sortable: this.isSortable(column),\r\n            editable,\r\n            value: column,\r\n            width: this.calcWidthColumn(column),\r\n            alias: this.retrieveAlias(column)\r\n          });\r\n        }\r\n      }\r\n    },\r\n\r\n    checkPermission() {\r\n      navigator.permissions.query({ name: 'clipboard-write' }).then(result => {\r\n        if (result.state == 'granted' || result.state == 'prompt') {\r\n          this.menu_context.options = _.concat(\r\n            this.menu_context.options,\r\n            MENU_CONTROLS.COPY_INTO_CLIPBORAD()\r\n          );\r\n        }\r\n      });\r\n    },\r\n\r\n    loadCheckbox(value) {\r\n      if (_.isBoolean(this.options.checker) && this.options.checker) {\r\n        for (let index in this.value) {\r\n          let el = this.value[index];\r\n          let keyRow = el[this.options.key];\r\n\r\n          this.map_checkbox[keyRow] = _.isBoolean(value) ? value : false;\r\n          this.selectRow(this.map_checkbox[keyRow], keyRow, null, true);\r\n        }\r\n      }\r\n    },\r\n\r\n    reloadCheckbox() {\r\n      if (!_.isBoolean(this.options.checker) || !this.options.checker) return;\r\n      this.$nextTick(() => {\r\n        this.data_table.forEach(el => {\r\n          let key = el[this.options.key];\r\n          this.$bus.$emit(\r\n            `select_${key}_${this.table_id}`,\r\n            this.map_checkbox[key]\r\n          );\r\n        });\r\n      });\r\n    },\r\n\r\n    selectAll(select) {\r\n      if (_.isBoolean(select) && !select) {\r\n        this.all_check = false;\r\n        this.$emit('choosing', []);\r\n      } else {\r\n        this.$emit('choosing', this.collectSelectedRow(true));\r\n      }\r\n      for (let key in this.map_checkbox) {\r\n        this.map_checkbox[key] = this.all_check;\r\n      }\r\n      this.$bus.$emit(`select_all_${this.table_id}`, this.all_check);\r\n    },\r\n\r\n    selectRow(val, key, isStop, isIgonre) {\r\n      this.map_checkbox[key] = val;\r\n      this.reload = `${new Date().getTime()}`;\r\n      var isAll = true;\r\n      _.forIn(this.map_checkbox, val => {\r\n        if (!val) {\r\n          isAll = false;\r\n        }\r\n      });\r\n      this.all_check = isAll;\r\n      if (_.isNil(isStop)) {\r\n        this.$bus.$emit(`select_${key}_${this.table_id}`, val);\r\n      }\r\n\r\n      if (_.isNil(isIgonre)) {\r\n        this.$emit('choosing', this.collectSelectedRow());\r\n      }\r\n    },\r\n\r\n    collectSelectedRow(isAll) {\r\n      if (isAll) {\r\n        if (this.all_check) {\r\n          return _.cloneDeep(this.data_table);\r\n        } else {\r\n          return [];\r\n        }\r\n      } else {\r\n        let result = [];\r\n        for (let key in this.map_checkbox) {\r\n          if (this.map_checkbox[key]) {\r\n            let record = _.find(this.data_table, { [this.options.key]: key });\r\n            result.push(record);\r\n          }\r\n        }\r\n        return result;\r\n      }\r\n    },\r\n\r\n    readFilterOptions() {\r\n      if (_.isObject(this.filter) && !_.isEmpty(this.filter)) {\r\n        this.filter_options.turn_on = true;\r\n        let filterCols = _.keys(this.filter).filter(\r\n          key =>\r\n            !_.isNil(this.headers[key]) &&\r\n            !_.includes(this.options.hiddens, key)\r\n        );\r\n        filterCols.forEach(column => {\r\n          let type = this.validFilterTypes(this.filter[column]);\r\n          this.search_map[column] = {\r\n            value: null,\r\n            key: this.options.key,\r\n            type,\r\n            column,\r\n            results: [],\r\n            operation: PERFECT_TABLE_FILTER_OPERATIONS.DEFAULTS[type]\r\n          };\r\n        });\r\n      }\r\n    },\r\n\r\n    loadActions() {\r\n      if (_.isBoolean(this.options.dragable) && this.options.dragable) {\r\n        this.columns = _.concat(\r\n          {\r\n            text: '',\r\n            align: 'center',\r\n            sortable: false,\r\n            value: '$drag_row',\r\n            width: '20px'\r\n          },\r\n          this.columns\r\n        );\r\n      }\r\n      if (!_.isNil(this.options.actions) && !_.isEmpty(this.options.actions)) {\r\n        this.columns.push({\r\n          text: 'global.table.columns.action',\r\n          align: 'center',\r\n          sortable: false,\r\n          value: '$actions'\r\n        });\r\n\r\n        for (let key in this.options.actions) {\r\n          let action = this.options.actions[key];\r\n\r\n          // action.callback = this.handleAction(key, action.callback);\r\n          if (_.isString(action.scope)) {\r\n            switch (action.scope) {\r\n              case PERFECT_TABLE_ACTION_SCOPE.RECORD:\r\n                this.actions.row.push(action);\r\n                break;\r\n              case PERFECT_TABLE_ACTION_SCOPE.GLOBAL:\r\n                this.actions.global.push(action);\r\n                break;\r\n              case PERFECT_TABLE_ACTION_SCOPE.CLICK.ROW:\r\n                this.actions.click.push(action);\r\n                break;\r\n              case PERFECT_TABLE_ACTION_SCOPE.CLICK.CELL:\r\n                if (\r\n                  _.isString(action.target) &&\r\n                  (_.startsWith(action.target, '$') ||\r\n                    _.isNil(this.headers[action.target]))\r\n                ) {\r\n                  break;\r\n                }\r\n                this.actions.click.push(action);\r\n                break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    callback(action, record, event) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n\r\n      record = this.removeControlCol(record);\r\n      action.callback(record[this.options.key], record, event);\r\n    },\r\n\r\n    handleEvent(record, col, event, rightClick) {\r\n      let key = record[this.options.key];\r\n      event.preventDefault();\r\n      if (rightClick) {\r\n        this.menu_context.show = false;\r\n        this.menu_context.x = event.clientX;\r\n        this.menu_context.y = event.clientY;\r\n        this.menu_context.target_col = col;\r\n        this.menu_context.target_record = record;\r\n\r\n        if (_.isBoolean(this.options.checker) && this.options.checker) {\r\n          let option = MENU_CONTROLS.SELECT_ROW();\r\n          if (this.map_checkbox[key]) {\r\n            option = MENU_CONTROLS.UNSELECT_ROW();\r\n          }\r\n          this.menu_context.options[0] = option;\r\n        }\r\n\r\n        this.$nextTick(() => {\r\n          if (this.menu_context.options.length == 0) return;\r\n          this.menu_context.show = true;\r\n        });\r\n      } else {\r\n        let result = { data: _.omit(record, '$no') };\r\n        result[this.options.key] = key;\r\n\r\n        for (let index in this.actions.click) {\r\n          let action = this.actions.click[index];\r\n          if (action.scope == PERFECT_TABLE_ACTION_SCOPE.CLICK.CELL) {\r\n            result.target = col;\r\n            result.target_value = record[col];\r\n\r\n            if (\r\n              _.startsWith(col, '$') ||\r\n              (!_.isNil(action.target) && action.target !== col)\r\n            ) {\r\n              continue;\r\n            }\r\n          }\r\n          action.callback(result, event);\r\n        }\r\n      }\r\n    },\r\n\r\n    menuContextAction(code) {\r\n      let record = this.removeControlCol(this.menu_context.target_record);\r\n      let key = record[this.options.key];\r\n      switch (code) {\r\n        case 'COPY_CELL':\r\n          if (_.startsWith(this.menu_context.target_col, '$')) {\r\n            this.copyToClipBoard(null);\r\n          } else {\r\n            this.copyToClipBoard(record[this.menu_context.target_col]);\r\n          }\r\n          break;\r\n        case 'COPY_ROW':\r\n          this.copyToClipBoard(JSON.stringify(record));\r\n          break;\r\n        case 'SELECT_ROW':\r\n          this.selectRow(!this.map_checkbox[key], key);\r\n          break;\r\n      }\r\n    },\r\n\r\n    removeControlCol(record) {\r\n      let needRemove = [];\r\n      for (let key in record) {\r\n        if (_.startsWith(key, '$')) {\r\n          needRemove.push(key);\r\n        }\r\n      }\r\n      return _.omit(record, needRemove);\r\n    },\r\n\r\n    copyToClipBoard(data) {\r\n      navigator.permissions.query({ name: 'clipboard-write' }).then(result => {\r\n        if (result.state == 'granted' || result.state == 'prompt') {\r\n          if (_.isNil(data)) data = '<NO_DATA>';\r\n          navigator.clipboard.writeText(data);\r\n        }\r\n      });\r\n    },\r\n\r\n    tableDragable() {\r\n      if (_.isBoolean(this.options.dragable) && this.options.dragable) {\r\n        var dragger = TableDragger(this.$el.getElementsByTagName('table')[0], {\r\n          mode: 'row',\r\n          dragHandler: '.row_handle',\r\n          onlyBody: true,\r\n          animation: 300\r\n        });\r\n        dragger.on('drop', () => {});\r\n      }\r\n    },\r\n\r\n    openOperationList(column, event) {\r\n      event.preventDefault();\r\n      this.focusTextField(`filter_${column}`);\r\n\r\n      this.choose_model = {\r\n        show: false,\r\n        column,\r\n        current: this.search_map[column].operation,\r\n        operations:\r\n          PERFECT_TABLE_FILTER_OPERATIONS[this.search_map[column].type]\r\n      };\r\n      this.choose_model.x = event.clientX;\r\n      this.choose_model.y = event.clientY;\r\n      this.$nextTick(() => {\r\n        this.choose_model.show = true;\r\n      });\r\n    },\r\n\r\n    chooseOperation(column, choice, event) {\r\n      event.preventDefault();\r\n      this.focusTextField(`filter_${column}`);\r\n      let type = this.search_map[column].type;\r\n      this.search_map[column].operation =\r\n        PERFECT_TABLE_FILTER_OPERATIONS[type][choice];\r\n      this.filterColumnToResult(column);\r\n    },\r\n\r\n    filtering() {\r\n      if (!this.filter_options.turn_on) return;\r\n\r\n      _.forIn(this.search_map, (value, column) => {\r\n        this.filterColunm(column);\r\n      });\r\n      this.getResult();\r\n    },\r\n\r\n    filterColunm(column) {\r\n      let condition = this.search_map[column];\r\n      this.search_map[column].results = [];\r\n      if (!FILTER_ULTIS.ignore[condition.type](condition.value)) {\r\n        this.value.forEach(el => {\r\n          if (!_.isNil(el[column])) {\r\n            FILTER_ULTIS.filter(this.search_map[column], el);\r\n          }\r\n        });\r\n      }\r\n    },\r\n\r\n    filterColumnToResult(column) {\r\n      this.filterColunm(column);\r\n      this.getResult();\r\n    },\r\n\r\n    changeFilterController() {\r\n      this.filter_options.state = !this.filter_options.state;\r\n\r\n      if (this.filter_options.state) {\r\n        this.filtering();\r\n      } else {\r\n        this.cleanFilterCache();\r\n        this.data_table = _.cloneDeep(this.value);\r\n      }\r\n    },\r\n\r\n    cleanFilterCache() {\r\n      _.forIn(this.search_map, condition => {\r\n        condition.value = null;\r\n        condition.results = [];\r\n      });\r\n    },\r\n\r\n    getResult() {\r\n      let accepts = null;\r\n      _.forIn(this.search_map, filter => {\r\n        if (FILTER_ULTIS.ignore[filter.type](filter.value)) {\r\n          filter.results = [];\r\n        } else {\r\n          if (accepts == null) {\r\n            accepts = filter.results;\r\n            return;\r\n          }\r\n\r\n          accepts = _.intersection(accepts, filter.results);\r\n        }\r\n      });\r\n      if (accepts != null) {\r\n        this.data_table = this.value.filter(el =>\r\n          _.includes(accepts, el[this.options.key])\r\n        );\r\n      } else {\r\n        this.data_table = _.cloneDeep(this.value);\r\n      }\r\n\r\n      this.selectAll(false);\r\n      this.reloadCheckbox();\r\n    },\r\n\r\n    validFilterTypes(colType) {\r\n      if (_.isNil(colType)) return PERFECT_TABLE_FILTER_TYPES[0];\r\n      let ignoreCaseVal = '';\r\n      if (_.isObject(colType)) {\r\n        if (_.isNil(colType.type)) return PERFECT_TABLE_FILTER_TYPES[0];\r\n        else return _.toUpper(colType.type);\r\n      } else {\r\n        ignoreCaseVal = _.toUpper(colType);\r\n      }\r\n      if (PERFECT_TABLE_FILTER_TYPES.includes(ignoreCaseVal)) {\r\n        return ignoreCaseVal;\r\n      } else {\r\n        return PERFECT_TABLE_FILTER_TYPES[0];\r\n      }\r\n    },\r\n\r\n    loadCustomCss() {\r\n      let hexRegex = /^#([A-Fa-f0-9]{3}|[A-Fa-f0-9]{6})$/;\r\n      let options = _.cloneDeep(PERFECT_TABLE_HOVER_COLOR);\r\n\r\n      if (_.isNil(this.options.decorates)) {\r\n        this.options.decorates = {\r\n          hover: {\r\n            only_cell: false\r\n          }\r\n        };\r\n      } else if (_.isNil(this.options.decorates.hover)) {\r\n        this.options.decorates.hover = {\r\n          only_cell: false\r\n        };\r\n      } else {\r\n        let custom = _.cloneDeep(this.options.decorates.hover);\r\n        if (_.isString(custom.color) && hexRegex.test(custom.color)) {\r\n          options.COLOR = custom.color;\r\n        }\r\n        if (_.isString(custom.background) && hexRegex.test(custom.background)) {\r\n          options.BACKGROUND = custom.background;\r\n        }\r\n      }\r\n\r\n      return {\r\n        '--t-empty-row': PERFECT_TABLE_HOVER_COLOR.BACKGROUND,\r\n        '--t-hover-text': options.COLOR,\r\n        '--t-hover': options.BACKGROUND\r\n      };\r\n    },\r\n\r\n    hoverHandle(event, isHover) {\r\n      let el = event.target;\r\n\r\n      if (isHover) {\r\n        if (this.options.decorates.hover.only_cell) {\r\n          el.className = el.className.replace(' t-hover', '');\r\n        } else {\r\n          this.hoverRowHandle(el, isHover);\r\n        }\r\n      } else {\r\n        if (this.options.decorates.hover.only_cell) {\r\n          el.className += ' t-hover';\r\n        } else {\r\n          this.hoverRowHandle(el, isHover);\r\n        }\r\n      }\r\n    },\r\n\r\n    hoverRowHandle(el, isHover) {\r\n      let childs = Array.from(el.parentNode.children);\r\n      for (let index in childs) {\r\n        if (isHover) {\r\n          childs[index].className = childs[index].className.replace(\r\n            ' t-hover',\r\n            ''\r\n          );\r\n        } else {\r\n          childs[index].className += ' t-hover';\r\n        }\r\n      }\r\n    },\r\n\r\n    focusTextField(control) {\r\n      let component = this.$refs[control];\r\n      if (component != undefined && component[0] != undefined) {\r\n        let inputControl = component[0].$el.getElementsByTagName('input');\r\n        inputControl[0].focus();\r\n      }\r\n    },\r\n\r\n    ignoreHidden(headers) {\r\n      return headers.filter(\r\n        col =>\r\n          _.isEmpty(this.options.hiddens) ||\r\n          !_.includes(this.options.hiddens, col.value)\r\n      );\r\n    },\r\n\r\n    isSortable(col) {\r\n      return (\r\n        _.isArray(this.options.sortable) &&\r\n        _.includes(this.options.sortable, col)\r\n      );\r\n    },\r\n\r\n    isTextCenter(col) {\r\n      return _.isArray(this.options.center) &&\r\n        _.includes(this.options.center, col)\r\n        ? 'center'\r\n        : 'left';\r\n    },\r\n\r\n    calcWidthColumn(col) {\r\n      if (\r\n        !_.isNil(this.filter[col]) &&\r\n        _.isObject(this.filter[col]) &&\r\n        !_.isNil(this.filter[col].width)\r\n      ) {\r\n        return this.filter[col].width;\r\n      } else {\r\n        return '100px';\r\n      }\r\n    },\r\n\r\n    retrieveAlias(col) {\r\n      if (\r\n        _.isNil(this.filter) ||\r\n        _.isNil(this.filter[col]) ||\r\n        _.isNil(this.filter[col].alias)\r\n      )\r\n        return this.headers[col];\r\n\r\n      return this.filter[col].alias;\r\n    },\r\n\r\n    enableFilterCol(col) {\r\n      if (_.isNil(this.filter) || _.isNil(this.filter[col])) return false;\r\n\r\n      return true;\r\n    },\r\n\r\n    computedDecorateRow(record) {\r\n      this.reload ? true : false;\r\n\r\n      let key = record[this.options.key];\r\n      var result = [];\r\n      if (_.isBoolean(this.options.checker) && this.options.checker) {\r\n        if (this.map_checkbox[key]) {\r\n          result.push('t-hover');\r\n        }\r\n      }\r\n\r\n      if (\r\n        _.isNil(this.options.decorates.row) ||\r\n        !_.isArray(this.options.decorates.row)\r\n      ) {\r\n        return result;\r\n      }\r\n\r\n      this.options.decorates.row.forEach(el => {\r\n        if (_.isFunction(el.condition) && el.condition(record)) {\r\n          result.push(el.class);\r\n        }\r\n      });\r\n      return result;\r\n    },\r\n\r\n    showEmptyRow(index) {\r\n      index++;\r\n      return (\r\n        this.options.fixed_row_page &&\r\n        this.pagination.page == this.calcTotalPage &&\r\n        index == this.pagination.totalItems % this.pagination.rowsPerPage\r\n      );\r\n    },\r\n\r\n    holdFitlerControl(hover, column) {\r\n      let component = this.$refs[`filter_${column}`];\r\n      let isFocus = false;\r\n      if (component != undefined && component[0] != undefined) {\r\n        isFocus = component[0].isFocused;\r\n      }\r\n      let val = this.search_map[column].value;\r\n      if (val == '') {\r\n        this.search_map[column].value = null;\r\n      }\r\n\r\n      return hover || isFocus || this.search_map[column].value != null;\r\n    },\r\n\r\n    changeSort(sortable, column) {\r\n      if (this.filter_options.state && !_.isNil(this.search_map[column]))\r\n        return;\r\n\r\n      if (!sortable) return;\r\n      if (this.pagination.sortBy === column) {\r\n        this.pagination.descending = !this.pagination.descending;\r\n      } else {\r\n        this.pagination.sortBy = column;\r\n        this.pagination.descending = false;\r\n      }\r\n      this.reloadCheckbox();\r\n    },\r\n\r\n    computedCellValue(col, val) {\r\n      if (\r\n        _.isNil(this.options.decorates) ||\r\n        _.isNil(this.options.decorates.text) ||\r\n        _.isNil(this.options.decorates.text[col])\r\n      ) {\r\n        return val;\r\n      }\r\n      return this.options.decorates.text[col](val);\r\n    },\r\n\r\n    emptyField(col, val) {\r\n      if (!_.startsWith(col, '$') && _.isNil(val)) {\r\n        return {\r\n          background: '#fff5f5'\r\n        };\r\n      }\r\n      return {};\r\n    },\r\n\r\n    loadPaging() {\r\n      let headers = this.columns.filter(\r\n        col =>\r\n          _.isEmpty(this.options.hiddens) ||\r\n          !_.includes(this.options.hiddens, col.value)\r\n      );\r\n\r\n      if (_.isArray(this.options.page_size)) {\r\n        if (this.options.page_size.length == 0) {\r\n          this.options.page_size = PERFECT_TABLE_PAGE_SIZE;\r\n        } else if (this.options.page_size.length == 1) {\r\n          this.options.fixed_page = true;\r\n        }\r\n      } else {\r\n        this.options.page_size = PERFECT_TABLE_PAGE_SIZE;\r\n      }\r\n\r\n      this.pagination.rowsPerPage = this.options.page_size[0];\r\n\r\n      this.pagination.descending = false;\r\n      this.pagination.sortBy = this.options.key;\r\n      if (\r\n        !_.isEmpty(this.options.hiddens) &&\r\n        _.includes(this.options.hiddens, this.options.key)\r\n      ) {\r\n        if (_.isBoolean(this.options.autoNo) && this.options.autoNo) {\r\n          this.pagination.sortBy = '$no';\r\n        } else if (\r\n          _.isBoolean(this.options.dragable) &&\r\n          this.options.dragable\r\n        ) {\r\n          this.pagination.sortBy = headers.length > 1 ? headers[1].value : '';\r\n        } else {\r\n          this.pagination.sortBy = headers[0].value;\r\n        }\r\n      }\r\n\r\n      return headers;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n.perfect_table {\r\n  overflow: hidden;\r\n}\r\n\r\n.perfect_table .v-datatable thead tr {\r\n  background-color: #e1e1e1;\r\n}\r\n\r\n.perfect_table .v-datatable thead tr th.filter,\r\n.perfect_table .v-datatable tbody tr td.filter {\r\n  padding: 0 !important;\r\n}\r\n\r\n.perfect_table .v-datatable thead tr:first-child {\r\n  border-bottom: 2px solid var(--v-primary-base) !important;\r\n}\r\n\r\n.perfect_table .v-datatable thead tr th {\r\n  color: var(--v-primary-lighten1);\r\n  font-size: 13px;\r\n  font-weight: 600;\r\n}\r\n\r\n.perfect_table .v-datatable thead th:hover,\r\n.perfect_table .v-datatable thead th.sortable:hover {\r\n  color: var(--v-primary-base);\r\n}\r\n\r\n.perfect_table .theme--light.v-table tbody tr:hover {\r\n  background-color: #00000000;\r\n}\r\n\r\n.perfect_table .v-datatable tbody tr.t-hover,\r\n.perfect_table .v-datatable tbody tr td.t-hover {\r\n  color: var(--t-hover-text) !important;\r\n  background-color: var(--t-hover) !important;\r\n}\r\n\r\n.perfect_table .v-datatable td:not(:last-child) {\r\n  border-right: 1px solid #0000001f !important;\r\n}\r\n\r\n.perfect_table .v-datatable thead th.sortable.active i,\r\n.perfect_table .v-datatable thead th.sortable.active {\r\n  color: var(--v-primary-base) !important;\r\n}\r\n\r\n.perfect_table .v-datatable .checker_col {\r\n  height: 24px;\r\n  justify-content: center;\r\n}\r\n\r\n.perfect_table .v-datatable .checker_col .v-input--selection-controls__input {\r\n  margin: 0;\r\n}\r\n\r\n.perfect_table .table_footer {\r\n  width: 100%;\r\n  height: 52px;\r\n  line-height: 52px;\r\n  border-top: 1px solid #0000001f;\r\n  background-color: white;\r\n  font-size: 12px;\r\n  font-weight: 600;\r\n  color: #0000008a;\r\n  position: relative;\r\n  display: flex;\r\n}\r\n\r\n.perfect_table .table_footer .pagging {\r\n  position: absolute;\r\n  right: 16px;\r\n  top: 0;\r\n  height: 52px;\r\n  padding: 5px 0;\r\n}\r\n\r\n.perfect_table .table_footer .pagging .v-pagination__item {\r\n  line-height: 34px;\r\n}\r\n\r\n.perfect_table .page_size {\r\n  display: flex;\r\n}\r\n\r\n.perfect_table .table_footer .filtering_controller {\r\n  cursor: pointer;\r\n  user-select: none;\r\n  font-size: 16px;\r\n}\r\n\r\n.perfect_table .page_size .v-select {\r\n  padding: 0;\r\n  margin: 0;\r\n  max-width: 70px;\r\n  align-self: center;\r\n}\r\n\r\n.perfect_table .table_footer .v-input__slot {\r\n  margin: 0;\r\n}\r\n\r\n.perfect_table .table_footer .v-text-field__details {\r\n  display: none;\r\n}\r\n\r\n.perfect_table .table_footer .v-select__selection {\r\n  font-size: 12px;\r\n}\r\n\r\n.perfect_table .empty-row {\r\n  border: 0 !important;\r\n}\r\n\r\n.perfect_table .empty-row td {\r\n  background-color: var(--t-empty-row);\r\n}\r\n\r\n.perfect_table .filter {\r\n  position: relative;\r\n}\r\n\r\n.perfect_table .filter .filter_wrapper {\r\n  bottom: 4px;\r\n  left: 0;\r\n  position: absolute;\r\n  font-size: 500;\r\n}\r\n\r\n.perfect_table .filter .filter_wrapper .v-input__slot input,\r\n.perfect_table .filter .filter_wrapper .v-input__slot label {\r\n  font-weight: 400;\r\n  font-size: 15px;\r\n}\r\n\r\n.perfect_table .filter .filter_wrapper .v-input__slot {\r\n  margin: 0;\r\n}\r\n\r\n.perfect_table .filter .filter_wrapper .v-text-field__details {\r\n  display: none;\r\n}\r\n\r\n.perfect_table .filter .filter_wrapper .v-icon {\r\n  font-size: 16px;\r\n  opacity: 0.9 !important;\r\n}\r\n\r\n.menu-v-list {\r\n  max-height: 240px;\r\n  overflow-y: overlay;\r\n  padding: 0 !important;\r\n}\r\n\r\n.menu-v-list .v-list__tile {\r\n  height: 40px;\r\n  padding-left: 0 !important;\r\n}\r\n\r\n.menu-v-list .v-list__tile:hover .v-icon,\r\n.menu-v-list .v-list__tile:hover .v-list__tile__title {\r\n  color: var(--v-warning-base) !important;\r\n}\r\n\r\n.menu-v-list .v-list__tile__action {\r\n  min-width: unset;\r\n  justify-content: center;\r\n  width: 40px;\r\n}\r\n\r\n.menu-v-list .v-icon {\r\n  font-size: 16px !important;\r\n}\r\n\r\n.menu-v-list .v-list__tile__title {\r\n  font-size: 13px !important;\r\n}\r\n</style>\r\n"]}]}