{"remainingRequest":"D:\\Project_Mirea\\risk-box\\front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Project_Mirea\\risk-box\\front-end\\src\\components\\commons\\alert.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Project_Mirea\\risk-box\\front-end\\src\\components\\commons\\alert.vue","mtime":1556591576350},{"path":"D:\\Project_Mirea\\risk-box\\front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1556556018404},{"path":"D:\\Project_Mirea\\risk-box\\front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1556555986820},{"path":"D:\\Project_Mirea\\risk-box\\front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1556556018404},{"path":"D:\\Project_Mirea\\risk-box\\front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1556556019204}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { Checker } from 'utilities';\r\nimport {\r\n  APPEVENT_ALERT_INFO,\r\n  APPEVENT_ALERT_WARN,\r\n  APPEVENT_ALERT_ERROR\r\n} from 'core/app-events';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      show: false,\r\n      message: '',\r\n      icon: '',\r\n      color: '',\r\n\r\n      btns: [],\r\n\r\n      event_data: {\r\n        title: 'global.alert.title'\r\n      },\r\n\r\n      [APPEVENT_ALERT_INFO]: {\r\n        icon: this.$vuetify.icons.INFO,\r\n        color: this.$vuetify.theme.success\r\n      },\r\n\r\n      [APPEVENT_ALERT_WARN]: {\r\n        icon: this.$vuetify.icons.WARN,\r\n        color: this.$vuetify.theme.warning\r\n      },\r\n\r\n      [APPEVENT_ALERT_ERROR]: {\r\n        icon: this.$vuetify.icons.ERROR,\r\n        color: this.$vuetify.theme.error\r\n      },\r\n\r\n      ALL_EVENTS: [\r\n        APPEVENT_ALERT_INFO,\r\n        APPEVENT_ALERT_WARN,\r\n        APPEVENT_ALERT_ERROR\r\n      ],\r\n\r\n      BTN_STYLE: {\r\n        NORMAL: 'NORMAL',\r\n        OUTLINE: 'OUTLINE',\r\n        NONE: 'NONE'\r\n      }\r\n    };\r\n  },\r\n\r\n  created() {\r\n    this.listenEvent();\r\n  },\r\n\r\n  methods: {\r\n    listenEvent() {\r\n      this.$bus.$on(this.ALL_EVENTS, data => {\r\n        if (!this.show) {\r\n          Object.assign(this, this[data.event_code]);\r\n          this.message = '';\r\n          this.btns = [];\r\n\r\n          this.showAlert(data);\r\n        }\r\n      });\r\n    },\r\n\r\n    showAlert(event_data) {\r\n      this.show = true;\r\n      this.event_data = event_data;\r\n\r\n      if (Checker.isFunction(event_data.message)) {\r\n        this.message = event_data.message();\r\n      } else {\r\n        this.message = event_data.message;\r\n      }\r\n\r\n      if (event_data.controls != null) {\r\n        for (let btn in event_data.controls) {\r\n          let btn_config = event_data.controls[btn];\r\n          if (Checker.hasText(btn_config)) {\r\n            this.btns.push({\r\n              code: btn,\r\n              text: btn_config\r\n            });\r\n          } else if (Checker.isObject(btn_config)) {\r\n            this.btns.push({\r\n              code: btn,\r\n              text: btn_config.text,\r\n              color: btn_config.color || this.color,\r\n              style: this.chooseBtnStyle(btn_config.style),\r\n              dark: btn_config.dark || false\r\n            });\r\n          }\r\n        }\r\n      }\r\n\r\n      this.optionsHandler(event_data);\r\n    },\r\n\r\n    chooseBtnStyle(style) {\r\n      if (\r\n        Checker.hasText(style) &&\r\n        Object.keys(this.BTN_STYLE).includes(style.toUpperCase())\r\n      ) {\r\n        return style.toUpperCase();\r\n      }\r\n      return this.BTN_STYLE.NONE;\r\n    },\r\n\r\n    optionsHandler(event_data) {\r\n      if (\r\n        Checker.isBoolean(event_data.options.INTERVAL_UPDATE_MESSAGE) &&\r\n        event_data.options.INTERVAL_UPDATE_MESSAGE\r\n      ) {\r\n        if (Checker.isFunction(event_data.message)) {\r\n          var updateMessage = setInterval(() => {\r\n            let result = event_data.message();\r\n            if (Checker.isString(result)) {\r\n              this.message = result;\r\n            } else {\r\n              clearInterval(updateMessage);\r\n            }\r\n          }, event_data.options.INTERVAL_TIME_UPDATE_MESSAGE);\r\n        }\r\n      }\r\n    },\r\n\r\n    response(code) {\r\n      let clone_data = Object.assign({}, this.event_data);\r\n      this.show = false;\r\n\r\n      if (clone_data.callback != null) {\r\n        clone_data.callback(code, clone_data.data);\r\n      }\r\n    }\r\n  }\r\n};\r\n",{"version":3,"sources":["alert.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"alert.vue","sourceRoot":"src/components/commons","sourcesContent":["<template>\r\n  <v-dialog v-model=\"show\" width=\"500\" v-bind=\"{ persistent: btns.length > 0 }\">\r\n    <v-container fluid text-md-center grid-list-md class=\"no_padding\">\r\n      <v-card>\r\n        <v-card-text class=\"alert_title\" :style=\"{ color: color }\">\r\n          <v-icon :color=\"color\" medium>{{ icon }}</v-icon>\r\n          {{ $t(event_data.title) }}\r\n        </v-card-text>\r\n        <v-card-text>\r\n          <v-flex class=\"text_message\" md10 v-html=\"$t(message)\" />\r\n        </v-card-text>\r\n        <v-card-text class=\"no_padding control_side\">\r\n          <v-layout justify-end>\r\n            <template v-for=\"item in btns\">\r\n              <v-btn\r\n                :key=\"item.code\"\r\n                :color=\"item.color || color\"\r\n                :class=\"{\r\n                  control_btn: true,\r\n                  'white--text': item.dark || false\r\n                }\"\r\n                v-bind=\"{\r\n                  flat: item.style == undefined || item.style == BTN_STYLE.NONE,\r\n                  outline: item.style == BTN_STYLE.OUTLINE\r\n                }\"\r\n                small\r\n                @click=\"response(item.code)\"\r\n              >\r\n                {{ $t(item.text) }}\r\n              </v-btn>\r\n            </template>\r\n          </v-layout>\r\n        </v-card-text>\r\n      </v-card>\r\n    </v-container>\r\n  </v-dialog>\r\n</template>\r\n\r\n<script>\r\nimport { Checker } from 'utilities';\r\nimport {\r\n  APPEVENT_ALERT_INFO,\r\n  APPEVENT_ALERT_WARN,\r\n  APPEVENT_ALERT_ERROR\r\n} from 'core/app-events';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      show: false,\r\n      message: '',\r\n      icon: '',\r\n      color: '',\r\n\r\n      btns: [],\r\n\r\n      event_data: {\r\n        title: 'global.alert.title'\r\n      },\r\n\r\n      [APPEVENT_ALERT_INFO]: {\r\n        icon: this.$vuetify.icons.INFO,\r\n        color: this.$vuetify.theme.success\r\n      },\r\n\r\n      [APPEVENT_ALERT_WARN]: {\r\n        icon: this.$vuetify.icons.WARN,\r\n        color: this.$vuetify.theme.warning\r\n      },\r\n\r\n      [APPEVENT_ALERT_ERROR]: {\r\n        icon: this.$vuetify.icons.ERROR,\r\n        color: this.$vuetify.theme.error\r\n      },\r\n\r\n      ALL_EVENTS: [\r\n        APPEVENT_ALERT_INFO,\r\n        APPEVENT_ALERT_WARN,\r\n        APPEVENT_ALERT_ERROR\r\n      ],\r\n\r\n      BTN_STYLE: {\r\n        NORMAL: 'NORMAL',\r\n        OUTLINE: 'OUTLINE',\r\n        NONE: 'NONE'\r\n      }\r\n    };\r\n  },\r\n\r\n  created() {\r\n    this.listenEvent();\r\n  },\r\n\r\n  methods: {\r\n    listenEvent() {\r\n      this.$bus.$on(this.ALL_EVENTS, data => {\r\n        if (!this.show) {\r\n          Object.assign(this, this[data.event_code]);\r\n          this.message = '';\r\n          this.btns = [];\r\n\r\n          this.showAlert(data);\r\n        }\r\n      });\r\n    },\r\n\r\n    showAlert(event_data) {\r\n      this.show = true;\r\n      this.event_data = event_data;\r\n\r\n      if (Checker.isFunction(event_data.message)) {\r\n        this.message = event_data.message();\r\n      } else {\r\n        this.message = event_data.message;\r\n      }\r\n\r\n      if (event_data.controls != null) {\r\n        for (let btn in event_data.controls) {\r\n          let btn_config = event_data.controls[btn];\r\n          if (Checker.hasText(btn_config)) {\r\n            this.btns.push({\r\n              code: btn,\r\n              text: btn_config\r\n            });\r\n          } else if (Checker.isObject(btn_config)) {\r\n            this.btns.push({\r\n              code: btn,\r\n              text: btn_config.text,\r\n              color: btn_config.color || this.color,\r\n              style: this.chooseBtnStyle(btn_config.style),\r\n              dark: btn_config.dark || false\r\n            });\r\n          }\r\n        }\r\n      }\r\n\r\n      this.optionsHandler(event_data);\r\n    },\r\n\r\n    chooseBtnStyle(style) {\r\n      if (\r\n        Checker.hasText(style) &&\r\n        Object.keys(this.BTN_STYLE).includes(style.toUpperCase())\r\n      ) {\r\n        return style.toUpperCase();\r\n      }\r\n      return this.BTN_STYLE.NONE;\r\n    },\r\n\r\n    optionsHandler(event_data) {\r\n      if (\r\n        Checker.isBoolean(event_data.options.INTERVAL_UPDATE_MESSAGE) &&\r\n        event_data.options.INTERVAL_UPDATE_MESSAGE\r\n      ) {\r\n        if (Checker.isFunction(event_data.message)) {\r\n          var updateMessage = setInterval(() => {\r\n            let result = event_data.message();\r\n            if (Checker.isString(result)) {\r\n              this.message = result;\r\n            } else {\r\n              clearInterval(updateMessage);\r\n            }\r\n          }, event_data.options.INTERVAL_TIME_UPDATE_MESSAGE);\r\n        }\r\n      }\r\n    },\r\n\r\n    response(code) {\r\n      let clone_data = Object.assign({}, this.event_data);\r\n      this.show = false;\r\n\r\n      if (clone_data.callback != null) {\r\n        clone_data.callback(code, clone_data.data);\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.alert_title {\r\n  text-align: left;\r\n  color: #444;\r\n  font-size: 22px;\r\n  background-color: #e1e1e1;\r\n}\r\n\r\n.text_message {\r\n  line-height: 40px !important;\r\n  color: #999;\r\n  text-align: left;\r\n  font-size: 18px;\r\n}\r\n\r\n.control_side {\r\n  width: calc(100% - 32px);\r\n  margin: 0 16px;\r\n  padding: 7px 0 !important;\r\n}\r\n\r\n.control_btn {\r\n  margin: 7px 0 7px 10px !important;\r\n}\r\n</style>\r\n"]}]}