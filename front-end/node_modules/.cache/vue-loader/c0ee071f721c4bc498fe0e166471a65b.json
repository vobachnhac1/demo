{"remainingRequest":"D:\\Project_Mirea\\risk-box\\front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Project_Mirea\\risk-box\\front-end\\src\\components\\commons\\scheduler\\index.vue?vue&type=style&index=0&id=027b6cf7&lang=scss&scoped=true&","dependencies":[{"path":"D:\\Project_Mirea\\risk-box\\front-end\\src\\components\\commons\\scheduler\\index.vue","mtime":1556591576353},{"path":"D:\\Project_Mirea\\risk-box\\front-end\\node_modules\\css-loader\\index.js","mtime":1556556018313},{"path":"D:\\Project_Mirea\\risk-box\\front-end\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1556556019204},{"path":"D:\\Project_Mirea\\risk-box\\front-end\\node_modules\\postcss-loader\\src\\index.js","mtime":1556556018798},{"path":"D:\\Project_Mirea\\risk-box\\front-end\\node_modules\\sass-loader\\lib\\loader.js","mtime":1556556033078},{"path":"D:\\Project_Mirea\\risk-box\\front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1556556018404},{"path":"D:\\Project_Mirea\\risk-box\\front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1556556019204}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n.scheduler-wrapper {\r\n  position: relative;\r\n}\r\n\r\n.fix_col {\r\n  display: table;\r\n  line-height: 48px;\r\n}\r\n\r\n.scheduler-header {\r\n  display: inline-flex;\r\n  height: 48px;\r\n  line-height: 48px;\r\n  max-height: 48px;\r\n}\r\n\r\n.scheduler-row {\r\n  display: table-row-group;\r\n}\r\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsOA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"index.vue","sourceRoot":"src/components/commons/scheduler","sourcesContent":["<template>\r\n  <div>\r\n    <v-data-table :headers=\"table.headers\" :items=\"table.data\" hide-actions>\r\n      <template slot=\"headers\" slot-scope=\"props\">\r\n        <tr class=\"scheduler-header\">\r\n          <th\r\n            v-for=\"(header, index) in props.headers\"\r\n            :key=\"index\"\r\n            :width=\"index == 0 ? 120 : colWidth\"\r\n            class=\"text-xs-center fix_col\"\r\n          >\r\n            {{ header.text }}\r\n          </th>\r\n        </tr>\r\n      </template>\r\n      <template slot=\"items\" slot-scope=\"props\">\r\n        <tr class=\"scheduler-row\">\r\n          <td width=\"120\">{{ props.item.date }}</td>\r\n          <td\r\n            :width=\"fix_headers.length * colWidth\"\r\n            class=\"text-xs-center scheduler-wrapper\"\r\n          >\r\n            <template v-for=\"(item, i) in loadScheduler(props.item.date)\">\r\n              <schedule-node\r\n                :key=\"i\"\r\n                :data=\"item\"\r\n                @view=\"openDetailDialog(item, props.item.date)\"\r\n              />\r\n            </template>\r\n          </td>\r\n        </tr>\r\n      </template>\r\n    </v-data-table>\r\n    <node-detail\r\n      :show=\"view_detail\"\r\n      :data=\"view_data\"\r\n      @close=\"handleCloseDetailDialog\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport ScheduleNode from './schedule-node';\r\nimport NodeDetail from './node-detail';\r\n\r\nexport default {\r\n  components: { ScheduleNode, NodeDetail },\r\n\r\n  props: {\r\n    scheduleData: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n\r\n    extraInfo: {\r\n      type: Object,\r\n      default: () => {},\r\n      required: false\r\n    },\r\n\r\n    curMonth: {\r\n      type: Number,\r\n      default: new Date().getMonth() + 1,\r\n      required: false\r\n    },\r\n\r\n    curYear: {\r\n      type: Number,\r\n      default: new Date().getFullYear(),\r\n      required: false\r\n    },\r\n\r\n    colWidth: {\r\n      type: Number,\r\n      default: 80,\r\n      required: false\r\n    }\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      view_detail: false,\r\n      view_data: {},\r\n\r\n      table: {\r\n        headers: [\r\n          { text: 'Ng√†y', sortable: false, align: 'center', value: 'date' }\r\n        ],\r\n        data: {}\r\n      },\r\n\r\n      fix_headers: [\r\n        '08:00',\r\n        '08:30',\r\n        '09:00',\r\n        '09:30',\r\n        '10:00',\r\n        '10:30',\r\n        '11:00',\r\n        '11:30',\r\n        '12:00',\r\n        '12:30',\r\n        '13:00',\r\n        '13:30',\r\n        '14:00',\r\n        '14:30',\r\n        '15:00',\r\n        '15:30',\r\n        '16:00',\r\n        '16:30',\r\n        '17:00',\r\n        '17:30'\r\n      ]\r\n    };\r\n  },\r\n\r\n  watch: {\r\n    curMonth() {\r\n      this.prepareDateRows();\r\n    },\r\n\r\n    curYear() {\r\n      this.prepareDateRows();\r\n    },\r\n\r\n    colWidth() {\r\n      this.prepareHeader();\r\n    },\r\n\r\n    scheduleData() {\r\n      this.table.data = [];\r\n      this.prepareDateRows();\r\n    }\r\n  },\r\n\r\n  created() {\r\n    this.prepareHeader();\r\n    this.prepareDateRows();\r\n  },\r\n\r\n  methods: {\r\n    prepareHeader() {\r\n      for (var i = 0; i < this.fix_headers.length; i++) {\r\n        this.table.headers.push({\r\n          text: this.fix_headers[i],\r\n          sortable: false,\r\n          width: this.colWidth\r\n        });\r\n      }\r\n    },\r\n\r\n    prepareDateRows() {\r\n      let listDays = [];\r\n      let date = new Date(this.curYear, this.curMonth - 1, 1);\r\n\r\n      while (date.getMonth() === this.curMonth - 1) {\r\n        let [month, day, year] = date.toLocaleDateString('en').split('/');\r\n        listDays.push({\r\n          date: `${year}/${month.padStart(2, '0')}/${day.padStart(2, '0')}`\r\n        });\r\n        date.setDate(date.getDate() + 1);\r\n      }\r\n      this.table.data = listDays;\r\n    },\r\n\r\n    openDetailDialog(node, booking_date) {\r\n      this.view_detail = true;\r\n      node.booking_date = booking_date;\r\n      node.extra_info = this.extraInfo;\r\n      this.view_data = node;\r\n    },\r\n\r\n    loadScheduler(date) {\r\n      let result = [];\r\n      if (this.scheduleData != null) {\r\n        let dataInDate = this.scheduleData[date];\r\n        if (dataInDate != undefined || dataInDate != null) {\r\n          for (var i = 0; i < dataInDate.length; i++) {\r\n            let element = dataInDate[i];\r\n            if (element.to > element.from) {\r\n              element.left =\r\n                (element.from * 2 - 16) * this.colWidth + this.colWidth / 2;\r\n              element.width =\r\n                (element.to * 2 - element.from * 2) * this.colWidth;\r\n              element.state = this.calculateTime(element, date);\r\n              result.push(element);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return result;\r\n    },\r\n\r\n    handleCloseDetailDialog() {\r\n      this.view_detail = false;\r\n      this.view_data = {};\r\n    },\r\n\r\n    calculateTime(node, date) {\r\n      let now = new Date();\r\n\r\n      let compare_date = new Date(date);\r\n      let current_date = new Date(now.toLocaleDateString('en'));\r\n\r\n      let hours = (now.getUTCHours() + 7) % 24;\r\n      let minutes = now.getUTCMinutes();\r\n      let current_time =\r\n        hours + (minutes == 30 ? 0.5 : minutes > 30 ? 0.6 : 0.4);\r\n\r\n      if (\r\n        compare_date.getTime() == current_date.getTime() &&\r\n        node.from <= current_time &&\r\n        current_time <= node.to\r\n      ) {\r\n        return 'current-time';\r\n      } else if (\r\n        compare_date.getTime() > current_date.getTime() ||\r\n        (compare_date.getTime() == current_date.getTime() &&\r\n          current_time < node.from)\r\n      ) {\r\n        return 'future-time';\r\n      } else {\r\n        return 'old-time';\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.scheduler-wrapper {\r\n  position: relative;\r\n}\r\n\r\n.fix_col {\r\n  display: table;\r\n  line-height: 48px;\r\n}\r\n\r\n.scheduler-header {\r\n  display: inline-flex;\r\n  height: 48px;\r\n  line-height: 48px;\r\n  max-height: 48px;\r\n}\r\n\r\n.scheduler-row {\r\n  display: table-row-group;\r\n}\r\n</style>\r\n"]}]}