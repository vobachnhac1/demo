{"remainingRequest":"D:\\demo\\front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\demo\\front-end\\src\\components\\commons\\number-text-field.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\demo\\front-end\\src\\components\\commons\\number-text-field.vue","mtime":1556937921688},{"path":"D:\\demo\\front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1556937905901},{"path":"D:\\demo\\front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1556937905542},{"path":"D:\\demo\\front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1556937905901},{"path":"D:\\demo\\front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1556937918662}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nexport default {\r\n  props: {\r\n    value: {\r\n      type: Number,\r\n      default: 0,\r\n      required: true\r\n    },\r\n\r\n    type: {\r\n      type: String,\r\n      default: 'int',\r\n      required: false\r\n    },\r\n\r\n    after: {\r\n      type: Number,\r\n      default: 2,\r\n      required: false\r\n    },\r\n\r\n    format: {\r\n      type: String,\r\n      default: 'en',\r\n      required: false\r\n    },\r\n\r\n    label: {\r\n      type: String,\r\n      default: '',\r\n      required: false\r\n    },\r\n\r\n    placeholder: {\r\n      type: String,\r\n      default: '',\r\n      required: false\r\n    },\r\n\r\n    icon: {\r\n      type: String,\r\n      default: '',\r\n      required: false\r\n    }\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      formatVal: '',\r\n      numberVal: 0\r\n    };\r\n  },\r\n\r\n  watch: {\r\n    value() {\r\n      this.numberVal = this.value;\r\n      this.formatVal = this.formatToString(this.value);\r\n    }\r\n  },\r\n\r\n  created() {\r\n    this.numberVal = this.value;\r\n    this.formatVal = this.formatToString(this.value);\r\n  },\r\n\r\n  methods: {\r\n    formatText() {\r\n      if (this.formatVal !== '' || this.formatVal > Number.MAX_SAFE_INTEGER) {\r\n        try {\r\n          this.numberVal = this.parse(this.formatVal);\r\n          this.formatVal = this.formatToString(this.numberVal);\r\n          this.$emit('input', this.numberVal);\r\n        } catch (e) {\r\n          this.formatVal = this.formatToString(this.numberVal);\r\n        }\r\n      } else {\r\n        this.formatVal = this.formatToString(this.numberVal);\r\n      }\r\n    },\r\n\r\n    preventText(event) {\r\n      let isPrevent = false;\r\n      switch (this.type) {\r\n        case 'int':\r\n          if (\r\n            !(event.key >= 0 && event.key <= 9 && this.formatVal.length < 15)\r\n          ) {\r\n            isPrevent = true;\r\n          }\r\n          break;\r\n        case 'float':\r\n          if (\r\n            !(\r\n              ((event.key >= 0 && event.key <= 9) || event.key == '.') &&\r\n              this.formatVal.length < 15\r\n            )\r\n          ) {\r\n            isPrevent = true;\r\n          }\r\n          break;\r\n      }\r\n\r\n      if (isPrevent) {\r\n        event.preventDefault();\r\n      }\r\n    },\r\n\r\n    parse(str) {\r\n      switch (this.type) {\r\n        case 'int':\r\n          return parseInt(str.replace(/[^0-9]/g, ''));\r\n        case 'float':\r\n          var val = parseFloat(str.replace(/[^0-9.]/g, '')).toFixed(this.after);\r\n          return parseFloat(val);\r\n      }\r\n    },\r\n\r\n    formatToString(val) {\r\n      switch (this.type) {\r\n        case 'int':\r\n          return new Intl.NumberFormat(this.format).format(val);\r\n        case 'float':\r\n          return val.toFixed(this.after).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\r\n      }\r\n    }\r\n  }\r\n};\r\n",{"version":3,"sources":["number-text-field.vue"],"names":[],"mappings":";;;;;;;;;;;;;;AAcfile":"number-text-field.vue","sourceRoot":"src/components/commons","sourcesContent":["<template>\r\n  <div :class=\"['number_text_filed', icon == '' ? '' : 'show']\">\r\n    <div class=\"icon_format\">{{ icon }}</div>\r\n    <v-text-field\r\n      v-model=\"formatVal\"\r\n      :label=\"label\"\r\n      :placeholder=\"placeholder\"\r\n      @keypress=\"preventText\"\r\n      @blur=\"formatText\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  props: {\r\n    value: {\r\n      type: Number,\r\n      default: 0,\r\n      required: true\r\n    },\r\n\r\n    type: {\r\n      type: String,\r\n      default: 'int',\r\n      required: false\r\n    },\r\n\r\n    after: {\r\n      type: Number,\r\n      default: 2,\r\n      required: false\r\n    },\r\n\r\n    format: {\r\n      type: String,\r\n      default: 'en',\r\n      required: false\r\n    },\r\n\r\n    label: {\r\n      type: String,\r\n      default: '',\r\n      required: false\r\n    },\r\n\r\n    placeholder: {\r\n      type: String,\r\n      default: '',\r\n      required: false\r\n    },\r\n\r\n    icon: {\r\n      type: String,\r\n      default: '',\r\n      required: false\r\n    }\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      formatVal: '',\r\n      numberVal: 0\r\n    };\r\n  },\r\n\r\n  watch: {\r\n    value() {\r\n      this.numberVal = this.value;\r\n      this.formatVal = this.formatToString(this.value);\r\n    }\r\n  },\r\n\r\n  created() {\r\n    this.numberVal = this.value;\r\n    this.formatVal = this.formatToString(this.value);\r\n  },\r\n\r\n  methods: {\r\n    formatText() {\r\n      if (this.formatVal !== '' || this.formatVal > Number.MAX_SAFE_INTEGER) {\r\n        try {\r\n          this.numberVal = this.parse(this.formatVal);\r\n          this.formatVal = this.formatToString(this.numberVal);\r\n          this.$emit('input', this.numberVal);\r\n        } catch (e) {\r\n          this.formatVal = this.formatToString(this.numberVal);\r\n        }\r\n      } else {\r\n        this.formatVal = this.formatToString(this.numberVal);\r\n      }\r\n    },\r\n\r\n    preventText(event) {\r\n      let isPrevent = false;\r\n      switch (this.type) {\r\n        case 'int':\r\n          if (\r\n            !(event.key >= 0 && event.key <= 9 && this.formatVal.length < 15)\r\n          ) {\r\n            isPrevent = true;\r\n          }\r\n          break;\r\n        case 'float':\r\n          if (\r\n            !(\r\n              ((event.key >= 0 && event.key <= 9) || event.key == '.') &&\r\n              this.formatVal.length < 15\r\n            )\r\n          ) {\r\n            isPrevent = true;\r\n          }\r\n          break;\r\n      }\r\n\r\n      if (isPrevent) {\r\n        event.preventDefault();\r\n      }\r\n    },\r\n\r\n    parse(str) {\r\n      switch (this.type) {\r\n        case 'int':\r\n          return parseInt(str.replace(/[^0-9]/g, ''));\r\n        case 'float':\r\n          var val = parseFloat(str.replace(/[^0-9.]/g, '')).toFixed(this.after);\r\n          return parseFloat(val);\r\n      }\r\n    },\r\n\r\n    formatToString(val) {\r\n      switch (this.type) {\r\n        case 'int':\r\n          return new Intl.NumberFormat(this.format).format(val);\r\n        case 'float':\r\n          return val.toFixed(this.after).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n.number_text_filed {\r\n  position: relative;\r\n}\r\n\r\n.number_text_filed .icon_format {\r\n  position: absolute;\r\n  left: 0;\r\n  top: 17px;\r\n  display: none;\r\n}\r\n\r\n.number_text_filed.show .icon_format {\r\n  display: block;\r\n}\r\n\r\n.number_text_filed.show .v-input__control input {\r\n  padding-left: 15px !important;\r\n}\r\n</style>\r\n"]}]}