{"remainingRequest":"D:\\demo\\front-end\\node_modules\\babel-loader\\lib\\index.js!D:\\demo\\front-end\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\demo\\front-end\\src\\utilities\\date-formater.js","dependencies":[{"path":"D:\\demo\\front-end\\src\\utilities\\date-formater.js","mtime":1556937921719},{"path":"D:\\demo\\front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1556937905901},{"path":"D:\\demo\\front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1556937905542},{"path":"D:\\demo\\front-end\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1556937903935}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.regexp.split\";\nimport _slicedToArray from \"D:\\\\demo\\\\front-end\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/slicedToArray\";\nimport \"core-js/modules/es7.string.pad-start\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport _classCallCheck from \"D:\\\\demo\\\\front-end\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\demo\\\\front-end\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/createClass\";\nimport \"core-js/modules/es6.regexp.constructor\";\nvar REGEX_DDMMYYYY_DASH = new RegExp(/^((0)\\d{1}|[1-9]{1}|(1|2)\\d{1}|(3)[0-1]{1})-((0)\\d{1}|[1-9]{1}|(1)[0-2]{1})-((19|20)\\d{2})$/, '');\nvar REGEX_DDMMYYYY_SLASH = new RegExp(/^((0)\\d{1}|[1-9]{1}|(1|2)\\d{1}|(3)[0-1]{1})\\/((0)\\d{1}|[1-9]{1}|(1)[0-2]{1})\\/((19|20)\\d{2})$/, '');\nvar REGEX_MMDDYYYY_DASH = new RegExp(/^((0)\\d{1}|[1-9]{1}|(1)[0-2]{1})-((0)\\d{1}|[1-9]{1}|(1|2)\\d{1}|(3)[0-1]{1})-((19|20)\\d{2})$/, '');\nvar REGEX_MMDDYYYY_SLASH = new RegExp(/^((0)\\d{1}|[1-9]{1}|(1)[0-2]{1})\\/((0)\\d{1}|[1-9]{1}|(1|2)\\d{1}|(3)[0-1]{1})\\/((19|20)\\d{2})$/, '');\nvar REGEX_YYYYMMDD_DASH = new RegExp(/^((19|20)\\d{2})-((0)\\d{1}|[1-9]{1}|(1)[0-2]{1})-((0)\\d{1}|[1-9]{1}|(1|2)\\d{1}|(3)[0-1]{1})$/, '');\nvar SUPPORTED = {\n  'DD-MM-YYYY': REGEX_DDMMYYYY_DASH,\n  'MM-DD-YYYY': REGEX_MMDDYYYY_DASH,\n  'YYYY-MM-DD': REGEX_YYYYMMDD_DASH,\n  'DD/MM/YYYY': REGEX_DDMMYYYY_SLASH,\n  'MM/DD/YYYY': REGEX_MMDDYYYY_SLASH\n};\n\nvar DateFormater =\n/*#__PURE__*/\nfunction () {\n  function DateFormater() {\n    _classCallCheck(this, DateFormater);\n  }\n\n  _createClass(DateFormater, null, [{\n    key: \"isSupported\",\n    value: function isSupported(format) {\n      if (hasText(format) && Object.keys(SUPPORTED).includes(format.toUpperCase())) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid(date, format) {\n      if (isDate(date)) {\n        return true;\n      }\n\n      if (hasText(date) && DateFormater.isSupported(format)) {\n        return SUPPORTED[format].test(date);\n      }\n\n      return false;\n    }\n  }, {\n    key: \"transform\",\n    value: function transform(date, format) {\n      var validDate = null;\n      isDate(date) ? validDate = date : false;\n\n      if (validDate == null && hasText(date) && DateFormater.isValidSupported(date)) {\n        validDate = DateFormater.toDate(date);\n      }\n\n      if (validDate != null) {\n        return dateToString[format.toUpperCase()](validDate);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"toDate\",\n    value: function toDate(date) {\n      if (isDate(date)) {\n        return date;\n      }\n\n      var result = null;\n\n      if (hasText(date)) {\n        if (REGEX_DDMMYYYY_DASH.test(date)) {\n          result = stringToDate['DD-MM-YYYY'](date);\n        } else if (REGEX_MMDDYYYY_DASH.test(date)) {\n          result = stringToDate['MM-DD-YYYY'](date);\n        } else if (REGEX_YYYYMMDD_DASH.test(date)) {\n          result = stringToDate['YYYY-MM-DD'](date);\n        } else if (REGEX_DDMMYYYY_SLASH.test(date)) {\n          result = stringToDate['DD/MM/YYYY'](date);\n        } else if (REGEX_MMDDYYYY_SLASH.test(date)) {\n          result = stringToDate['MM/DD/YYYY'](date);\n        }\n      }\n\n      if (result !== 'Invalid Date' && isDate(result)) {\n        return result;\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"isValidSupported\",\n    value: function isValidSupported(date) {\n      if (isDate(date)) {\n        return true;\n      } else if (hasText(date)) {\n        return REGEX_DDMMYYYY_DASH.test(date) || REGEX_MMDDYYYY_DASH.test(date) || REGEX_YYYYMMDD_DASH.test(date) || REGEX_DDMMYYYY_SLASH.test(date) || REGEX_MMDDYYYY_SLASH.test(date);\n      }\n\n      return false;\n    }\n  }]);\n\n  return DateFormater;\n}();\n\nexport { DateFormater as default };\nvar dateToString = {\n  'DD-MM-YYYY': function DDMMYYYY(date) {\n    var parts = getDateParts(date);\n    return \"\".concat(parts.date.padStart(2, '0'), \"-\").concat(parts.month.padStart(2, '0'), \"-\").concat(parts.year);\n  },\n  'MM-DD-YYYY': function MMDDYYYY(date) {\n    var parts = getDateParts(date);\n    return \"\".concat(parts.month.padStart(2, '0'), \"-\").concat(parts.date.padStart(2, '0'), \"-\").concat(parts.year);\n  },\n  'YYYY-MM-DD': function YYYYMMDD(date) {\n    var parts = getDateParts(date);\n    return \"\".concat(parts.year, \"-\").concat(parts.month.padStart(2, '0'), \"-\").concat(parts.date.padStart(2, '0'));\n  },\n  'DD/MM/YYYY': function DDMMYYYY(date) {\n    var parts = getDateParts(date);\n    return \"\".concat(parts.date.padStart(2, '0'), \"/\").concat(parts.month.padStart(2, '0'), \"/\").concat(parts.year);\n  },\n  'MM/DD/YYYY': function MMDDYYYY(date) {\n    var parts = getDateParts(date);\n    return \"\".concat(parts.month.padStart(2, '0'), \"/\").concat(parts.date.padStart(2, '0'), \"/\").concat(parts.year);\n  }\n};\nvar stringToDate = {\n  'DD-MM-YYYY': function DDMMYYYY(str) {\n    var _str$split = str.split('-'),\n        _str$split2 = _slicedToArray(_str$split, 3),\n        date = _str$split2[0],\n        month = _str$split2[1],\n        year = _str$split2[2];\n\n    if (isValidDate(year, month, date)) {\n      return new Date(year, month - 1, date);\n    }\n\n    return null;\n  },\n  'MM-DD-YYYY': function MMDDYYYY(str) {\n    var _str$split3 = str.split('-'),\n        _str$split4 = _slicedToArray(_str$split3, 3),\n        month = _str$split4[0],\n        date = _str$split4[1],\n        year = _str$split4[2];\n\n    if (isValidDate(year, month, date)) {\n      return new Date(year, month - 1, date);\n    }\n\n    return null;\n  },\n  'YYYY-MM-DD': function YYYYMMDD(str) {\n    var _str$split5 = str.split('-'),\n        _str$split6 = _slicedToArray(_str$split5, 3),\n        year = _str$split6[0],\n        month = _str$split6[1],\n        date = _str$split6[2];\n\n    if (isValidDate(year, month, date)) {\n      return new Date(year, month - 1, date);\n    }\n\n    return null;\n  },\n  'DD/MM/YYYY': function DDMMYYYY(str) {\n    var _str$split7 = str.split('/'),\n        _str$split8 = _slicedToArray(_str$split7, 3),\n        date = _str$split8[0],\n        month = _str$split8[1],\n        year = _str$split8[2];\n\n    if (isValidDate(year, month, date)) {\n      return new Date(year, month - 1, date);\n    }\n\n    return null;\n  },\n  'MM/DD/YYYY': function MMDDYYYY(str) {\n    var _str$split9 = str.split('/'),\n        _str$split10 = _slicedToArray(_str$split9, 3),\n        month = _str$split10[0],\n        date = _str$split10[1],\n        year = _str$split10[2];\n\n    if (isValidDate(year, month, date)) {\n      return new Date(year, month - 1, date);\n    }\n\n    return null;\n  }\n};\nvar toString = Object.prototype.toString;\n\nvar hasText = function hasText(val) {\n  return typeof val === 'string' && val.trim() != '';\n};\n\nvar isDate = function isDate(val) {\n  return toString.call(val) === '[object Date]';\n};\n\nvar getDateParts = function getDateParts(date) {\n  return {\n    date: \"\".concat(date.getDate()),\n    month: \"\".concat(date.getMonth() + 1),\n    year: \"\".concat(date.getFullYear())\n  };\n};\n\nvar isValidDate = function isValidDate(year, month, date) {\n  var isleapYear = false;\n\n  if (year % 4 === 0 && year % 100 !== 0 && year % 400 !== 0 || year % 100 === 0 && year % 400 === 0) {\n    isleapYear = true;\n  }\n\n  var maxDaysInMonth = [31, isleapYear ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n  if (maxDaysInMonth[month - 1] < date) {\n    return false;\n  }\n\n  return true;\n};",{"version":3,"sources":["D:\\demo\\front-end\\src\\utilities\\date-formater.js"],"names":["REGEX_DDMMYYYY_DASH","RegExp","REGEX_DDMMYYYY_SLASH","REGEX_MMDDYYYY_DASH","REGEX_MMDDYYYY_SLASH","REGEX_YYYYMMDD_DASH","SUPPORTED","DateFormater","format","hasText","Object","keys","includes","toUpperCase","date","isDate","isSupported","test","validDate","isValidSupported","toDate","dateToString","result","stringToDate","parts","getDateParts","padStart","month","year","str","split","isValidDate","Date","toString","prototype","val","trim","call","getDate","getMonth","getFullYear","isleapYear","maxDaysInMonth"],"mappings":"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","sourcesContent":["const REGEX_DDMMYYYY_DASH = new RegExp(\r\n  /^((0)\\d{1}|[1-9]{1}|(1|2)\\d{1}|(3)[0-1]{1})-((0)\\d{1}|[1-9]{1}|(1)[0-2]{1})-((19|20)\\d{2})$/,\r\n  ''\r\n);\r\nconst REGEX_DDMMYYYY_SLASH = new RegExp(\r\n  /^((0)\\d{1}|[1-9]{1}|(1|2)\\d{1}|(3)[0-1]{1})\\/((0)\\d{1}|[1-9]{1}|(1)[0-2]{1})\\/((19|20)\\d{2})$/,\r\n  ''\r\n);\r\nconst REGEX_MMDDYYYY_DASH = new RegExp(\r\n  /^((0)\\d{1}|[1-9]{1}|(1)[0-2]{1})-((0)\\d{1}|[1-9]{1}|(1|2)\\d{1}|(3)[0-1]{1})-((19|20)\\d{2})$/,\r\n  ''\r\n);\r\nconst REGEX_MMDDYYYY_SLASH = new RegExp(\r\n  /^((0)\\d{1}|[1-9]{1}|(1)[0-2]{1})\\/((0)\\d{1}|[1-9]{1}|(1|2)\\d{1}|(3)[0-1]{1})\\/((19|20)\\d{2})$/,\r\n  ''\r\n);\r\nconst REGEX_YYYYMMDD_DASH = new RegExp(\r\n  /^((19|20)\\d{2})-((0)\\d{1}|[1-9]{1}|(1)[0-2]{1})-((0)\\d{1}|[1-9]{1}|(1|2)\\d{1}|(3)[0-1]{1})$/,\r\n  ''\r\n);\r\n\r\nconst SUPPORTED = {\r\n  'DD-MM-YYYY': REGEX_DDMMYYYY_DASH,\r\n  'MM-DD-YYYY': REGEX_MMDDYYYY_DASH,\r\n  'YYYY-MM-DD': REGEX_YYYYMMDD_DASH,\r\n  'DD/MM/YYYY': REGEX_DDMMYYYY_SLASH,\r\n  'MM/DD/YYYY': REGEX_MMDDYYYY_SLASH\r\n};\r\n\r\nexport default class DateFormater {\r\n  static isSupported(format) {\r\n    if (\r\n      hasText(format) &&\r\n      Object.keys(SUPPORTED).includes(format.toUpperCase())\r\n    ) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  static isValid(date, format) {\r\n    if (isDate(date)) {\r\n      return true;\r\n    }\r\n\r\n    if (hasText(date) && DateFormater.isSupported(format)) {\r\n      return SUPPORTED[format].test(date);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  static transform(date, format) {\r\n    let validDate = null;\r\n    isDate(date) ? (validDate = date) : false;\r\n\r\n    if (\r\n      validDate == null &&\r\n      hasText(date) &&\r\n      DateFormater.isValidSupported(date)\r\n    ) {\r\n      validDate = DateFormater.toDate(date);\r\n    }\r\n\r\n    if (validDate != null) {\r\n      return dateToString[format.toUpperCase()](validDate);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  static toDate(date) {\r\n    if (isDate(date)) {\r\n      return date;\r\n    }\r\n\r\n    let result = null;\r\n    if (hasText(date)) {\r\n      if (REGEX_DDMMYYYY_DASH.test(date)) {\r\n        result = stringToDate['DD-MM-YYYY'](date);\r\n      } else if (REGEX_MMDDYYYY_DASH.test(date)) {\r\n        result = stringToDate['MM-DD-YYYY'](date);\r\n      } else if (REGEX_YYYYMMDD_DASH.test(date)) {\r\n        result = stringToDate['YYYY-MM-DD'](date);\r\n      } else if (REGEX_DDMMYYYY_SLASH.test(date)) {\r\n        result = stringToDate['DD/MM/YYYY'](date);\r\n      } else if (REGEX_MMDDYYYY_SLASH.test(date)) {\r\n        result = stringToDate['MM/DD/YYYY'](date);\r\n      }\r\n    }\r\n\r\n    if (result !== 'Invalid Date' && isDate(result)) {\r\n      return result;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  static isValidSupported(date) {\r\n    if (isDate(date)) {\r\n      return true;\r\n    } else if (hasText(date)) {\r\n      return (\r\n        REGEX_DDMMYYYY_DASH.test(date) ||\r\n        REGEX_MMDDYYYY_DASH.test(date) ||\r\n        REGEX_YYYYMMDD_DASH.test(date) ||\r\n        REGEX_DDMMYYYY_SLASH.test(date) ||\r\n        REGEX_MMDDYYYY_SLASH.test(date)\r\n      );\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\nconst dateToString = {\r\n  'DD-MM-YYYY': date => {\r\n    let parts = getDateParts(date);\r\n    return `${parts.date.padStart(2, '0')}-${parts.month.padStart(2, '0')}-${\r\n      parts.year\r\n    }`;\r\n  },\r\n\r\n  'MM-DD-YYYY': date => {\r\n    let parts = getDateParts(date);\r\n    return `${parts.month.padStart(2, '0')}-${parts.date.padStart(2, '0')}-${\r\n      parts.year\r\n    }`;\r\n  },\r\n\r\n  'YYYY-MM-DD': date => {\r\n    let parts = getDateParts(date);\r\n    return `${parts.year}-${parts.month.padStart(2, '0')}-${parts.date.padStart(\r\n      2,\r\n      '0'\r\n    )}`;\r\n  },\r\n\r\n  'DD/MM/YYYY': date => {\r\n    let parts = getDateParts(date);\r\n    return `${parts.date.padStart(2, '0')}/${parts.month.padStart(2, '0')}/${\r\n      parts.year\r\n    }`;\r\n  },\r\n\r\n  'MM/DD/YYYY': date => {\r\n    let parts = getDateParts(date);\r\n    return `${parts.month.padStart(2, '0')}/${parts.date.padStart(2, '0')}/${\r\n      parts.year\r\n    }`;\r\n  }\r\n};\r\n\r\nconst stringToDate = {\r\n  'DD-MM-YYYY': str => {\r\n    const [date, month, year] = str.split('-');\r\n    if (isValidDate(year, month, date)) {\r\n      return new Date(year, month - 1, date);\r\n    }\r\n    return null;\r\n  },\r\n\r\n  'MM-DD-YYYY': str => {\r\n    const [month, date, year] = str.split('-');\r\n    if (isValidDate(year, month, date)) {\r\n      return new Date(year, month - 1, date);\r\n    }\r\n    return null;\r\n  },\r\n\r\n  'YYYY-MM-DD': str => {\r\n    const [year, month, date] = str.split('-');\r\n    if (isValidDate(year, month, date)) {\r\n      return new Date(year, month - 1, date);\r\n    }\r\n    return null;\r\n  },\r\n\r\n  'DD/MM/YYYY': str => {\r\n    const [date, month, year] = str.split('/');\r\n    if (isValidDate(year, month, date)) {\r\n      return new Date(year, month - 1, date);\r\n    }\r\n    return null;\r\n  },\r\n\r\n  'MM/DD/YYYY': str => {\r\n    const [month, date, year] = str.split('/');\r\n    if (isValidDate(year, month, date)) {\r\n      return new Date(year, month - 1, date);\r\n    }\r\n    return null;\r\n  }\r\n};\r\n\r\nconst toString = Object.prototype.toString;\r\n\r\nconst hasText = val => {\r\n  return typeof val === 'string' && val.trim() != '';\r\n};\r\n\r\nconst isDate = val => {\r\n  return toString.call(val) === '[object Date]';\r\n};\r\n\r\nconst getDateParts = date => {\r\n  return {\r\n    date: `${date.getDate()}`,\r\n    month: `${date.getMonth() + 1}`,\r\n    year: `${date.getFullYear()}`\r\n  };\r\n};\r\n\r\nconst isValidDate = (year, month, date) => {\r\n  let isleapYear = false;\r\n  if (\r\n    (year % 4 === 0 && year % 100 !== 0 && year % 400 !== 0) ||\r\n    (year % 100 === 0 && year % 400 === 0)\r\n  ) {\r\n    isleapYear = true;\r\n  }\r\n  let maxDaysInMonth = [\r\n    31,\r\n    isleapYear ? 29 : 28,\r\n    31,\r\n    30,\r\n    31,\r\n    30,\r\n    31,\r\n    31,\r\n    30,\r\n    31,\r\n    30,\r\n    31\r\n  ];\r\n  if (maxDaysInMonth[month - 1] < date) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n};\r\n"]}]}