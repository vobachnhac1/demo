{"remainingRequest":"D:\\Project_Mirea\\risk-box\\front-end\\node_modules\\babel-loader\\lib\\index.js!D:\\Project_Mirea\\risk-box\\front-end\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Project_Mirea\\risk-box\\front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Project_Mirea\\risk-box\\front-end\\src\\components\\commons\\scheduler\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Project_Mirea\\risk-box\\front-end\\src\\components\\commons\\scheduler\\index.vue","mtime":1556591576353},{"path":"D:\\Project_Mirea\\risk-box\\front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1556556018404},{"path":"D:\\Project_Mirea\\risk-box\\front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1556555986820},{"path":"D:\\Project_Mirea\\risk-box\\front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1556556018404},{"path":"D:\\Project_Mirea\\risk-box\\front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1556556019204}],"contextDependencies":[],"result":["import \"core-js/modules/es7.string.pad-start\";\nimport \"core-js/modules/es6.regexp.split\";\nimport _slicedToArray from \"D:\\\\Project_Mirea\\\\risk-box\\\\front-end\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/slicedToArray\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport ScheduleNode from \"./schedule-node\";\nimport NodeDetail from \"./node-detail\";\nexport default {\n  components: {\n    ScheduleNode: ScheduleNode,\n    NodeDetail: NodeDetail\n  },\n  props: {\n    scheduleData: {\n      type: Object,\n      required: true\n    },\n    extraInfo: {\n      type: Object,\n      default: function _default() {},\n      required: false\n    },\n    curMonth: {\n      type: Number,\n      default: new Date().getMonth() + 1,\n      required: false\n    },\n    curYear: {\n      type: Number,\n      default: new Date().getFullYear(),\n      required: false\n    },\n    colWidth: {\n      type: Number,\n      default: 80,\n      required: false\n    }\n  },\n  data: function data() {\n    return {\n      view_detail: false,\n      view_data: {},\n      table: {\n        headers: [{\n          text: 'Ng√†y',\n          sortable: false,\n          align: 'center',\n          value: 'date'\n        }],\n        data: {}\n      },\n      fix_headers: ['08:00', '08:30', '09:00', '09:30', '10:00', '10:30', '11:00', '11:30', '12:00', '12:30', '13:00', '13:30', '14:00', '14:30', '15:00', '15:30', '16:00', '16:30', '17:00', '17:30']\n    };\n  },\n  watch: {\n    curMonth: function curMonth() {\n      this.prepareDateRows();\n    },\n    curYear: function curYear() {\n      this.prepareDateRows();\n    },\n    colWidth: function colWidth() {\n      this.prepareHeader();\n    },\n    scheduleData: function scheduleData() {\n      this.table.data = [];\n      this.prepareDateRows();\n    }\n  },\n  created: function created() {\n    this.prepareHeader();\n    this.prepareDateRows();\n  },\n  methods: {\n    prepareHeader: function prepareHeader() {\n      for (var i = 0; i < this.fix_headers.length; i++) {\n        this.table.headers.push({\n          text: this.fix_headers[i],\n          sortable: false,\n          width: this.colWidth\n        });\n      }\n    },\n    prepareDateRows: function prepareDateRows() {\n      var listDays = [];\n      var date = new Date(this.curYear, this.curMonth - 1, 1);\n\n      while (date.getMonth() === this.curMonth - 1) {\n        var _date$toLocaleDateStr = date.toLocaleDateString('en').split('/'),\n            _date$toLocaleDateStr2 = _slicedToArray(_date$toLocaleDateStr, 3),\n            month = _date$toLocaleDateStr2[0],\n            day = _date$toLocaleDateStr2[1],\n            year = _date$toLocaleDateStr2[2];\n\n        listDays.push({\n          date: \"\".concat(year, \"/\").concat(month.padStart(2, '0'), \"/\").concat(day.padStart(2, '0'))\n        });\n        date.setDate(date.getDate() + 1);\n      }\n\n      this.table.data = listDays;\n    },\n    openDetailDialog: function openDetailDialog(node, booking_date) {\n      this.view_detail = true;\n      node.booking_date = booking_date;\n      node.extra_info = this.extraInfo;\n      this.view_data = node;\n    },\n    loadScheduler: function loadScheduler(date) {\n      var result = [];\n\n      if (this.scheduleData != null) {\n        var dataInDate = this.scheduleData[date];\n\n        if (dataInDate != undefined || dataInDate != null) {\n          for (var i = 0; i < dataInDate.length; i++) {\n            var element = dataInDate[i];\n\n            if (element.to > element.from) {\n              element.left = (element.from * 2 - 16) * this.colWidth + this.colWidth / 2;\n              element.width = (element.to * 2 - element.from * 2) * this.colWidth;\n              element.state = this.calculateTime(element, date);\n              result.push(element);\n            }\n          }\n        }\n      }\n\n      return result;\n    },\n    handleCloseDetailDialog: function handleCloseDetailDialog() {\n      this.view_detail = false;\n      this.view_data = {};\n    },\n    calculateTime: function calculateTime(node, date) {\n      var now = new Date();\n      var compare_date = new Date(date);\n      var current_date = new Date(now.toLocaleDateString('en'));\n      var hours = (now.getUTCHours() + 7) % 24;\n      var minutes = now.getUTCMinutes();\n      var current_time = hours + (minutes == 30 ? 0.5 : minutes > 30 ? 0.6 : 0.4);\n\n      if (compare_date.getTime() == current_date.getTime() && node.from <= current_time && current_time <= node.to) {\n        return 'current-time';\n      } else if (compare_date.getTime() > current_date.getTime() || compare_date.getTime() == current_date.getTime() && current_time < node.from) {\n        return 'future-time';\n      } else {\n        return 'old-time';\n      }\n    }\n  }\n};",{"version":3,"sources":["index.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div>\r\n    <v-data-table :headers=\"table.headers\" :items=\"table.data\" hide-actions>\r\n      <template slot=\"headers\" slot-scope=\"props\">\r\n        <tr class=\"scheduler-header\">\r\n          <th\r\n            v-for=\"(header, index) in props.headers\"\r\n            :key=\"index\"\r\n            :width=\"index == 0 ? 120 : colWidth\"\r\n            class=\"text-xs-center fix_col\"\r\n          >\r\n            {{ header.text }}\r\n          </th>\r\n        </tr>\r\n      </template>\r\n      <template slot=\"items\" slot-scope=\"props\">\r\n        <tr class=\"scheduler-row\">\r\n          <td width=\"120\">{{ props.item.date }}</td>\r\n          <td\r\n            :width=\"fix_headers.length * colWidth\"\r\n            class=\"text-xs-center scheduler-wrapper\"\r\n          >\r\n            <template v-for=\"(item, i) in loadScheduler(props.item.date)\">\r\n              <schedule-node\r\n                :key=\"i\"\r\n                :data=\"item\"\r\n                @view=\"openDetailDialog(item, props.item.date)\"\r\n              />\r\n            </template>\r\n          </td>\r\n        </tr>\r\n      </template>\r\n    </v-data-table>\r\n    <node-detail\r\n      :show=\"view_detail\"\r\n      :data=\"view_data\"\r\n      @close=\"handleCloseDetailDialog\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport ScheduleNode from './schedule-node';\r\nimport NodeDetail from './node-detail';\r\n\r\nexport default {\r\n  components: { ScheduleNode, NodeDetail },\r\n\r\n  props: {\r\n    scheduleData: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n\r\n    extraInfo: {\r\n      type: Object,\r\n      default: () => {},\r\n      required: false\r\n    },\r\n\r\n    curMonth: {\r\n      type: Number,\r\n      default: new Date().getMonth() + 1,\r\n      required: false\r\n    },\r\n\r\n    curYear: {\r\n      type: Number,\r\n      default: new Date().getFullYear(),\r\n      required: false\r\n    },\r\n\r\n    colWidth: {\r\n      type: Number,\r\n      default: 80,\r\n      required: false\r\n    }\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      view_detail: false,\r\n      view_data: {},\r\n\r\n      table: {\r\n        headers: [\r\n          { text: 'Ng√†y', sortable: false, align: 'center', value: 'date' }\r\n        ],\r\n        data: {}\r\n      },\r\n\r\n      fix_headers: [\r\n        '08:00',\r\n        '08:30',\r\n        '09:00',\r\n        '09:30',\r\n        '10:00',\r\n        '10:30',\r\n        '11:00',\r\n        '11:30',\r\n        '12:00',\r\n        '12:30',\r\n        '13:00',\r\n        '13:30',\r\n        '14:00',\r\n        '14:30',\r\n        '15:00',\r\n        '15:30',\r\n        '16:00',\r\n        '16:30',\r\n        '17:00',\r\n        '17:30'\r\n      ]\r\n    };\r\n  },\r\n\r\n  watch: {\r\n    curMonth() {\r\n      this.prepareDateRows();\r\n    },\r\n\r\n    curYear() {\r\n      this.prepareDateRows();\r\n    },\r\n\r\n    colWidth() {\r\n      this.prepareHeader();\r\n    },\r\n\r\n    scheduleData() {\r\n      this.table.data = [];\r\n      this.prepareDateRows();\r\n    }\r\n  },\r\n\r\n  created() {\r\n    this.prepareHeader();\r\n    this.prepareDateRows();\r\n  },\r\n\r\n  methods: {\r\n    prepareHeader() {\r\n      for (var i = 0; i < this.fix_headers.length; i++) {\r\n        this.table.headers.push({\r\n          text: this.fix_headers[i],\r\n          sortable: false,\r\n          width: this.colWidth\r\n        });\r\n      }\r\n    },\r\n\r\n    prepareDateRows() {\r\n      let listDays = [];\r\n      let date = new Date(this.curYear, this.curMonth - 1, 1);\r\n\r\n      while (date.getMonth() === this.curMonth - 1) {\r\n        let [month, day, year] = date.toLocaleDateString('en').split('/');\r\n        listDays.push({\r\n          date: `${year}/${month.padStart(2, '0')}/${day.padStart(2, '0')}`\r\n        });\r\n        date.setDate(date.getDate() + 1);\r\n      }\r\n      this.table.data = listDays;\r\n    },\r\n\r\n    openDetailDialog(node, booking_date) {\r\n      this.view_detail = true;\r\n      node.booking_date = booking_date;\r\n      node.extra_info = this.extraInfo;\r\n      this.view_data = node;\r\n    },\r\n\r\n    loadScheduler(date) {\r\n      let result = [];\r\n      if (this.scheduleData != null) {\r\n        let dataInDate = this.scheduleData[date];\r\n        if (dataInDate != undefined || dataInDate != null) {\r\n          for (var i = 0; i < dataInDate.length; i++) {\r\n            let element = dataInDate[i];\r\n            if (element.to > element.from) {\r\n              element.left =\r\n                (element.from * 2 - 16) * this.colWidth + this.colWidth / 2;\r\n              element.width =\r\n                (element.to * 2 - element.from * 2) * this.colWidth;\r\n              element.state = this.calculateTime(element, date);\r\n              result.push(element);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return result;\r\n    },\r\n\r\n    handleCloseDetailDialog() {\r\n      this.view_detail = false;\r\n      this.view_data = {};\r\n    },\r\n\r\n    calculateTime(node, date) {\r\n      let now = new Date();\r\n\r\n      let compare_date = new Date(date);\r\n      let current_date = new Date(now.toLocaleDateString('en'));\r\n\r\n      let hours = (now.getUTCHours() + 7) % 24;\r\n      let minutes = now.getUTCMinutes();\r\n      let current_time =\r\n        hours + (minutes == 30 ? 0.5 : minutes > 30 ? 0.6 : 0.4);\r\n\r\n      if (\r\n        compare_date.getTime() == current_date.getTime() &&\r\n        node.from <= current_time &&\r\n        current_time <= node.to\r\n      ) {\r\n        return 'current-time';\r\n      } else if (\r\n        compare_date.getTime() > current_date.getTime() ||\r\n        (compare_date.getTime() == current_date.getTime() &&\r\n          current_time < node.from)\r\n      ) {\r\n        return 'future-time';\r\n      } else {\r\n        return 'old-time';\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.scheduler-wrapper {\r\n  position: relative;\r\n}\r\n\r\n.fix_col {\r\n  display: table;\r\n  line-height: 48px;\r\n}\r\n\r\n.scheduler-header {\r\n  display: inline-flex;\r\n  height: 48px;\r\n  line-height: 48px;\r\n  max-height: 48px;\r\n}\r\n\r\n.scheduler-row {\r\n  display: table-row-group;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/commons/scheduler"}]}