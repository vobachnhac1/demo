{"remainingRequest":"D:\\Project_Mirea\\risk-box\\front-end\\node_modules\\babel-loader\\lib\\index.js!D:\\Project_Mirea\\risk-box\\front-end\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\Project_Mirea\\risk-box\\front-end\\src\\utilities\\json\\JsonImporter.js","dependencies":[{"path":"D:\\Project_Mirea\\risk-box\\front-end\\src\\utilities\\json\\JsonImporter.js","mtime":1556591576368},{"path":"D:\\Project_Mirea\\risk-box\\front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1556556018404},{"path":"D:\\Project_Mirea\\risk-box\\front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1556555986820},{"path":"D:\\Project_Mirea\\risk-box\\front-end\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1556556014088}],"contextDependencies":[],"result":["import \"core-js/modules/es6.typed.uint8-array\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.number.is-nan\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"D:\\\\Project_Mirea\\\\risk-box\\\\front-end\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"D:\\\\Project_Mirea\\\\risk-box\\\\front-end\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project_Mirea\\\\risk-box\\\\front-end\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/createClass\";\nimport XLSX from 'xlsx';\n\nvar Importer =\n/*#__PURE__*/\nfunction () {\n  function Importer() {\n    _classCallCheck(this, Importer);\n  }\n\n  _createClass(Importer, null, [{\n    key: \"readXLSX\",\n\n    /**\r\n     * Return MAP contain json data corresponding worksheet.\r\n     * @param FILE file\r\n     * @param STRING ARRAY wooksheets\r\n     */\n    value: function () {\n      var _readXLSX = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(file, wooksheets) {\n        var _ref,\n            rABS,\n            reader,\n            _args = arguments;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _ref = _args.length > 2 && _args[2] !== undefined ? _args[2] : {}, rABS = _ref.rABS;\n\n                if (rABS) {\n                  reader = new XLSX_Reader(true);\n                } else {\n                  reader = new XLSX_Reader();\n                }\n\n                _context.next = 4;\n                return reader.readFile(file, wooksheets);\n\n              case 4:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function readXLSX(_x, _x2) {\n        return _readXLSX.apply(this, arguments);\n      }\n\n      return readXLSX;\n    }()\n    /**\r\n     * Return json data of the first sheet.\r\n     * @param FILE file\r\n     */\n\n  }, {\n    key: \"readXLSXAllSheet\",\n    value: function () {\n      var _readXLSXAllSheet = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2(file) {\n        var _ref2,\n            rABS,\n            reader,\n            _args2 = arguments;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _ref2 = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {}, rABS = _ref2.rABS;\n\n                if (rABS) {\n                  reader = new XLSX_Reader(true);\n                } else {\n                  reader = new XLSX_Reader();\n                }\n\n                _context2.next = 4;\n                return reader.readFile(file, []);\n\n              case 4:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function readXLSXAllSheet(_x3) {\n        return _readXLSXAllSheet.apply(this, arguments);\n      }\n\n      return readXLSXAllSheet;\n    }()\n    /**\r\n     * Rename property name for each item in data array\r\n     * @param ARRAY data\r\n     * @param OBJECT properties\r\n     */\n\n  }, {\n    key: \"correctJsonPropertyName\",\n    value: function correctJsonPropertyName(data, properties) {\n      try {\n        if (Object.keys(properties).length == 0 || data.length == 0) return {\n          success: false,\n          message: 'Wrong arguments'\n        };\n      } catch (e) {\n        return {\n          success: false,\n          message: 'Wrong arguments'\n        };\n      }\n\n      var result = [];\n\n      for (var index in data) {\n        var element = data[index];\n        var new_element = {};\n\n        for (var property_name in properties) {\n          if (element[properties[property_name].name] != undefined) {\n            new_element[property_name] = element[properties[property_name].name];\n          } else {\n            new_element[property_name] = '';\n          }\n        }\n\n        var valid = Ulti.validate(new_element, properties);\n\n        if (valid.success) {\n          result.push(valid.data);\n        } else {\n          return valid;\n        }\n      }\n\n      return {\n        success: true,\n        data: result\n      };\n    }\n  }]);\n\n  return Importer;\n}();\n\nexport { Importer as default };\n\nvar Ulti =\n/*#__PURE__*/\nfunction () {\n  function Ulti() {\n    _classCallCheck(this, Ulti);\n  }\n\n  _createClass(Ulti, null, [{\n    key: \"validate\",\n    value: function validate(data, properties) {\n      var result = {};\n\n      for (var property_name in properties) {\n        var raw_data = data[property_name].trim();\n        var type = properties[property_name].type;\n\n        if (!type) {\n          type = 'String';\n        }\n\n        switch (type) {\n          case 'String':\n            // Ignore\n            result[property_name] = data[property_name];\n            break;\n\n          case 'Number':\n            if (!Number.isNaN(Number(raw_data))) {\n              result[property_name] = Number(raw_data);\n            } else {\n              return {\n                success: false,\n                message: 'The value of collumn [' + properties[property_name].name + ' <' + (raw_data == '' ? 'EMPTY VALUE' : raw_data) + '>] must be NUMBER'\n              };\n            }\n\n            break;\n\n          case 'Boolean':\n            if (raw_data == 'true' || raw_data == 'false') {\n              result[property_name] = raw_data == 'true';\n            } else {\n              return {\n                success: false,\n                message: 'The value of collumn [' + properties[property_name].name + ' <' + (raw_data == '' ? 'EMPTY VALUE' : raw_data) + '>] must be TRUE or FALSE'\n              };\n            }\n\n            break;\n\n          default:\n            // Ignore\n            result[property_name] = data[property_name];\n            break;\n        }\n      }\n\n      return {\n        success: true,\n        data: result\n      };\n    }\n  }]);\n\n  return Ulti;\n}();\n\nvar XLSX_Reader =\n/*#__PURE__*/\nfunction () {\n  function XLSX_Reader(rABS) {\n    _classCallCheck(this, XLSX_Reader);\n\n    this.rABS = rABS;\n  }\n\n  _createClass(XLSX_Reader, [{\n    key: \"readFile\",\n    value: function () {\n      var _readFile = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3(file, wooksheets) {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.fileConvertToWorkbook(file).then(function (workbook) {\n                  var result_data = {};\n\n                  if (wooksheets.length == 0) {\n                    for (var index in workbook.SheetNames) {\n                      var xlsxArr = XLSX.utils.sheet_to_json(workbook.Sheets[workbook.SheetNames[index]]);\n                      result_data[workbook.SheetNames[index]] = xlsxArr;\n                    }\n                  } else {\n                    for (var _index in wooksheets) {\n                      var sheet_name = wooksheets[_index];\n\n                      var _xlsxArr = XLSX.utils.sheet_to_json(workbook.Sheets[sheet_name]);\n\n                      if (_xlsxArr) {\n                        result_data[sheet_name] = _xlsxArr;\n                      }\n                    }\n                  }\n\n                  return {\n                    success: true,\n                    data: result_data\n                  };\n                }).catch(function (err) {\n                  return {\n                    sucess: false,\n                    message: err\n                  };\n                });\n\n              case 2:\n                return _context3.abrupt(\"return\", _context3.sent);\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function readFile(_x4, _x5) {\n        return _readFile.apply(this, arguments);\n      }\n\n      return readFile;\n    }()\n  }, {\n    key: \"fileConvertToWorkbook\",\n    value: function fileConvertToWorkbook(file) {\n      var _this = this;\n\n      var reader = new FileReader();\n\n      var fixdata = function fixdata(data) {\n        var o = '',\n            l = 0,\n            w = 10240;\n\n        for (; l < data.byteLength / w; ++l) {\n          o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w, l * w + w)));\n        }\n\n        o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w)));\n        return o;\n      };\n\n      return new Promise(function (resolve, reject) {\n        try {\n          reader.onload = function (renderEvent) {\n            var data = renderEvent.target.result;\n\n            if (_this.rABS) {\n              /* if binary string, read with type 'binary' */\n              resolve(XLSX.read(data, {\n                type: 'binary'\n              }));\n            } else {\n              /* if array buffer, convert to base64 */\n              var arr = fixdata(data);\n              resolve(XLSX.read(btoa(arr), {\n                type: 'base64'\n              }));\n            }\n          };\n\n          reader.onerror = function (error) {\n            reject(error);\n          };\n\n          if (_this.rABS) {\n            reader.readAsBinaryString(file);\n          } else {\n            reader.readAsArrayBuffer(file);\n          }\n        } catch (error) {\n          reject(error);\n        }\n      });\n    }\n  }]);\n\n  return XLSX_Reader;\n}();",{"version":3,"sources":["D:\\Project_Mirea\\risk-box\\front-end\\src\\utilities\\json\\JsonImporter.js"],"names":["XLSX","Importer","file","wooksheets","rABS","reader","XLSX_Reader","readFile","data","properties","Object","keys","length","success","message","e","result","index","element","new_element","property_name","name","undefined","valid","Ulti","validate","push","raw_data","trim","type","Number","isNaN","fileConvertToWorkbook","then","workbook","result_data","SheetNames","xlsxArr","utils","sheet_to_json","Sheets","sheet_name","catch","err","sucess","FileReader","fixdata","o","l","w","byteLength","String","fromCharCode","apply","Uint8Array","slice","Promise","resolve","reject","onload","renderEvent","target","read","arr","btoa","onerror","error","readAsBinaryString","readAsArrayBuffer"],"mappings":"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","sourcesContent":["import XLSX from 'xlsx';\r\n\r\nexport default class Importer {\r\n  /**\r\n   * Return MAP contain json data corresponding worksheet.\r\n   * @param FILE file\r\n   * @param STRING ARRAY wooksheets\r\n   */\r\n  static async readXLSX(file, wooksheets, { rABS } = {}) {\r\n    let reader;\r\n    if (rABS) {\r\n      reader = new XLSX_Reader(true);\r\n    } else {\r\n      reader = new XLSX_Reader();\r\n    }\r\n\r\n    return await reader.readFile(file, wooksheets);\r\n  }\r\n\r\n  /**\r\n   * Return json data of the first sheet.\r\n   * @param FILE file\r\n   */\r\n  static async readXLSXAllSheet(file, { rABS } = {}) {\r\n    let reader;\r\n    if (rABS) {\r\n      reader = new XLSX_Reader(true);\r\n    } else {\r\n      reader = new XLSX_Reader();\r\n    }\r\n\r\n    return await reader.readFile(file, []);\r\n  }\r\n\r\n  /**\r\n   * Rename property name for each item in data array\r\n   * @param ARRAY data\r\n   * @param OBJECT properties\r\n   */\r\n  static correctJsonPropertyName(data, properties) {\r\n    try {\r\n      if (Object.keys(properties).length == 0 || data.length == 0)\r\n        return {\r\n          success: false,\r\n          message: 'Wrong arguments'\r\n        };\r\n    } catch (e) {\r\n      return {\r\n        success: false,\r\n        message: 'Wrong arguments'\r\n      };\r\n    }\r\n\r\n    let result = [];\r\n    for (let index in data) {\r\n      let element = data[index];\r\n      let new_element = {};\r\n      for (let property_name in properties) {\r\n        if (element[properties[property_name].name] != undefined) {\r\n          new_element[property_name] = element[properties[property_name].name];\r\n        } else {\r\n          new_element[property_name] = '';\r\n        }\r\n      }\r\n      let valid = Ulti.validate(new_element, properties);\r\n      if (valid.success) {\r\n        result.push(valid.data);\r\n      } else {\r\n        return valid;\r\n      }\r\n    }\r\n\r\n    return {\r\n      success: true,\r\n      data: result\r\n    };\r\n  }\r\n}\r\n\r\nclass Ulti {\r\n  static validate(data, properties) {\r\n    let result = {};\r\n    for (let property_name in properties) {\r\n      let raw_data = data[property_name].trim();\r\n      let type = properties[property_name].type;\r\n      if (!type) {\r\n        type = 'String';\r\n      }\r\n\r\n      switch (type) {\r\n        case 'String':\r\n          // Ignore\r\n          result[property_name] = data[property_name];\r\n          break;\r\n        case 'Number':\r\n          if (!Number.isNaN(Number(raw_data))) {\r\n            result[property_name] = Number(raw_data);\r\n          } else {\r\n            return {\r\n              success: false,\r\n              message:\r\n                'The value of collumn [' +\r\n                properties[property_name].name +\r\n                ' <' +\r\n                (raw_data == '' ? 'EMPTY VALUE' : raw_data) +\r\n                '>] must be NUMBER'\r\n            };\r\n          }\r\n          break;\r\n        case 'Boolean':\r\n          if (raw_data == 'true' || raw_data == 'false') {\r\n            result[property_name] = raw_data == 'true';\r\n          } else {\r\n            return {\r\n              success: false,\r\n              message:\r\n                'The value of collumn [' +\r\n                properties[property_name].name +\r\n                ' <' +\r\n                (raw_data == '' ? 'EMPTY VALUE' : raw_data) +\r\n                '>] must be TRUE or FALSE'\r\n            };\r\n          }\r\n          break;\r\n        default:\r\n          // Ignore\r\n          result[property_name] = data[property_name];\r\n          break;\r\n      }\r\n    }\r\n    return { success: true, data: result };\r\n  }\r\n}\r\n\r\nclass XLSX_Reader {\r\n  constructor(rABS) {\r\n    this.rABS = rABS;\r\n  }\r\n\r\n  async readFile(file, wooksheets) {\r\n    return await this.fileConvertToWorkbook(file)\r\n      .then(workbook => {\r\n        let result_data = {};\r\n        if (wooksheets.length == 0) {\r\n          for (let index in workbook.SheetNames) {\r\n            let xlsxArr = XLSX.utils.sheet_to_json(\r\n              workbook.Sheets[workbook.SheetNames[index]]\r\n            );\r\n            result_data[workbook.SheetNames[index]] = xlsxArr;\r\n          }\r\n        } else {\r\n          for (let index in wooksheets) {\r\n            let sheet_name = wooksheets[index];\r\n            let xlsxArr = XLSX.utils.sheet_to_json(workbook.Sheets[sheet_name]);\r\n            if (xlsxArr) {\r\n              result_data[sheet_name] = xlsxArr;\r\n            }\r\n          }\r\n        }\r\n        return {\r\n          success: true,\r\n          data: result_data\r\n        };\r\n      })\r\n      .catch(err => {\r\n        return {\r\n          sucess: false,\r\n          message: err\r\n        };\r\n      });\r\n  }\r\n\r\n  fileConvertToWorkbook(file) {\r\n    let reader = new FileReader();\r\n    let fixdata = data => {\r\n      let o = '',\r\n        l = 0,\r\n        w = 10240;\r\n      for (; l < data.byteLength / w; ++l) {\r\n        o += String.fromCharCode.apply(\r\n          null,\r\n          new Uint8Array(data.slice(l * w, l * w + w))\r\n        );\r\n      }\r\n      o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w)));\r\n      return o;\r\n    };\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        reader.onload = renderEvent => {\r\n          let data = renderEvent.target.result;\r\n          if (this.rABS) {\r\n            /* if binary string, read with type 'binary' */\r\n            resolve(XLSX.read(data, { type: 'binary' }));\r\n          } else {\r\n            /* if array buffer, convert to base64 */\r\n            let arr = fixdata(data);\r\n            resolve(XLSX.read(btoa(arr), { type: 'base64' }));\r\n          }\r\n        };\r\n        reader.onerror = error => {\r\n          reject(error);\r\n        };\r\n        if (this.rABS) {\r\n          reader.readAsBinaryString(file);\r\n        } else {\r\n          reader.readAsArrayBuffer(file);\r\n        }\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n}\r\n"]}]}