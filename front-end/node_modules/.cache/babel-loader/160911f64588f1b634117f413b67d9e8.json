{"remainingRequest":"D:\\demo\\front-end\\node_modules\\babel-loader\\lib\\index.js!D:\\demo\\front-end\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\demo\\front-end\\src\\components\\modules\\authentication\\store\\actions.js","dependencies":[{"path":"D:\\demo\\front-end\\src\\components\\modules\\authentication\\store\\actions.js","mtime":1556937921688},{"path":"D:\\demo\\front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1556937905901},{"path":"D:\\demo\\front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1556937905542},{"path":"D:\\demo\\front-end\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1556937903935}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"D:\\\\demo\\\\front-end\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.number.constructor\";\nimport router from 'router';\nimport { RESTClient } from 'core';\nimport { Checker } from 'utilities';\nimport { RESET_AUTH_STATE, TOKEN_EXPIRED_IN, TOKEN_LAST_ACCESS, CURRENT_ACCOUNT, ACCESS_TOKEN } from \"./types\";\nimport { LOCAL_STORAGE_CURRENT_USER, LOCAL_STORAGE_EXPIRES_IN, LOCAL_STORAGE_LAST_ACCESS, LOCAL_STORAGE_ACCESS_TOKEN } from 'core/constant';\nexport var firstLoad = function firstLoad(_ref) {\n  var commit = _ref.commit;\n  var account = localStorage.getItem(LOCAL_STORAGE_CURRENT_USER);\n\n  if (Checker.hasText(account)) {\n    try {\n      var accountObj = JSON.parse(account);\n\n      if (Checker.isObject(accountObj) && accountObj.hasOwnProperty('username')) {\n        commit(CURRENT_ACCOUNT, accountObj);\n      }\n    } catch (e) {\n      commit(CURRENT_ACCOUNT, null);\n    }\n  }\n\n  var expired_in = Number(localStorage.getItem(LOCAL_STORAGE_EXPIRES_IN));\n  commit(TOKEN_EXPIRED_IN, Checker.isNumber(expired_in) ? expired_in : 1 * 60 * 60);\n  var now = new Date().getTime();\n  var last_access = Number(localStorage.getItem(LOCAL_STORAGE_LAST_ACCESS));\n  commit(TOKEN_LAST_ACCESS, Checker.isNumber(last_access) ? last_access : now);\n  var access_token = localStorage.getItem(LOCAL_STORAGE_ACCESS_TOKEN);\n\n  if (Checker.hasText(access_token) && Checker.isNumber(last_access) && Checker.isNumber(expired_in) && now - last_access < expired_in) {\n    commit(ACCESS_TOKEN, access_token);\n  }\n};\nexport var login =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee(_ref2, account) {\n    var commit, result, now;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            commit = _ref2.commit;\n            _context.next = 3;\n            return RESTClient.post('/login/auth', {\n              username: account.username,\n              password: account.password\n            });\n\n          case 3:\n            result = _context.sent;\n\n            if (!result.success) {\n              _context.next = 17;\n              break;\n            }\n\n            RESTClient.setAccessToken(result.data.access_token);\n            now = new Date().getTime();\n            commit(CURRENT_ACCOUNT, result.data.account);\n            commit(ACCESS_TOKEN, result.data.access_token);\n            commit(TOKEN_EXPIRED_IN, result.data.expires_in * 60 * 1000);\n            commit(TOKEN_LAST_ACCESS, now);\n            result.last_access = now;\n            storeLocal(result);\n            router.push({\n              path: '/'\n            });\n            return _context.abrupt(\"return\", true);\n\n          case 17:\n            return _context.abrupt(\"return\", result.message ? result.message : 'login_page.errors.login');\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function login(_x, _x2) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var logout = function logout(_ref4) {\n  var commit = _ref4.commit;\n  localStorage.clear();\n  commit(RESET_AUTH_STATE);\n  RESTClient.setAccessToken();\n};\nexport var updateLastAccess = function updateLastAccess(_ref5) {\n  var commit = _ref5.commit;\n  var now = new Date().getTime();\n  commit(TOKEN_LAST_ACCESS, now);\n  localStorage.setItem(LOCAL_STORAGE_LAST_ACCESS, now);\n};\n\nvar storeLocal = function storeLocal(reps) {\n  localStorage.setItem(LOCAL_STORAGE_CURRENT_USER, JSON.stringify(reps.data.account));\n  localStorage.setItem(LOCAL_STORAGE_ACCESS_TOKEN, reps.data.access_token);\n  localStorage.setItem(LOCAL_STORAGE_EXPIRES_IN, reps.data.expires_in * 60 * 1000);\n  localStorage.setItem(LOCAL_STORAGE_LAST_ACCESS, reps.last_access);\n};",{"version":3,"sources":["D:\\demo\\front-end\\src\\components\\modules\\authentication\\store\\actions.js"],"names":["router","RESTClient","Checker","RESET_AUTH_STATE","TOKEN_EXPIRED_IN","TOKEN_LAST_ACCESS","CURRENT_ACCOUNT","ACCESS_TOKEN","LOCAL_STORAGE_CURRENT_USER","LOCAL_STORAGE_EXPIRES_IN","LOCAL_STORAGE_LAST_ACCESS","LOCAL_STORAGE_ACCESS_TOKEN","firstLoad","commit","account","localStorage","getItem","hasText","accountObj","JSON","parse","isObject","hasOwnProperty","e","expired_in","Number","isNumber","now","Date","getTime","last_access","access_token","login","post","username","password","result","success","setAccessToken","data","expires_in","storeLocal","push","path","message","logout","clear","updateLastAccess","setItem","reps","stringify"],"mappings":"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","sourcesContent":["import router from 'router';\r\nimport { RESTClient } from 'core';\r\nimport { Checker } from 'utilities';\r\nimport {\r\n  RESET_AUTH_STATE,\r\n  TOKEN_EXPIRED_IN,\r\n  TOKEN_LAST_ACCESS,\r\n  CURRENT_ACCOUNT,\r\n  ACCESS_TOKEN\r\n} from './types';\r\nimport {\r\n  LOCAL_STORAGE_CURRENT_USER,\r\n  LOCAL_STORAGE_EXPIRES_IN,\r\n  LOCAL_STORAGE_LAST_ACCESS,\r\n  LOCAL_STORAGE_ACCESS_TOKEN\r\n} from 'core/constant';\r\n\r\nexport const firstLoad = ({ commit }) => {\r\n  let account = localStorage.getItem(LOCAL_STORAGE_CURRENT_USER);\r\n  if (Checker.hasText(account)) {\r\n    try {\r\n      let accountObj = JSON.parse(account);\r\n      if (\r\n        Checker.isObject(accountObj) &&\r\n        accountObj.hasOwnProperty('username')\r\n      ) {\r\n        commit(CURRENT_ACCOUNT, accountObj);\r\n      }\r\n    } catch (e) {\r\n      commit(CURRENT_ACCOUNT, null);\r\n    }\r\n  }\r\n\r\n  let expired_in = Number(localStorage.getItem(LOCAL_STORAGE_EXPIRES_IN));\r\n  commit(\r\n    TOKEN_EXPIRED_IN,\r\n    Checker.isNumber(expired_in) ? expired_in : 1 * 60 * 60\r\n  );\r\n\r\n  let now = new Date().getTime();\r\n  let last_access = Number(localStorage.getItem(LOCAL_STORAGE_LAST_ACCESS));\r\n  commit(TOKEN_LAST_ACCESS, Checker.isNumber(last_access) ? last_access : now);\r\n\r\n  let access_token = localStorage.getItem(LOCAL_STORAGE_ACCESS_TOKEN);\r\n  if (\r\n    Checker.hasText(access_token) &&\r\n    Checker.isNumber(last_access) &&\r\n    Checker.isNumber(expired_in) &&\r\n    now - last_access < expired_in\r\n  ) {\r\n    commit(ACCESS_TOKEN, access_token);\r\n  }\r\n};\r\n\r\nexport const login = async ({ commit }, account) => {\r\n  let result = await RESTClient.post('/login/auth', {\r\n    username: account.username,\r\n    password: account.password\r\n  });\r\n\r\n  if (result.success) {\r\n    RESTClient.setAccessToken(result.data.access_token);\r\n    let now = new Date().getTime();\r\n\r\n    commit(CURRENT_ACCOUNT, result.data.account);\r\n    commit(ACCESS_TOKEN, result.data.access_token);\r\n    commit(TOKEN_EXPIRED_IN, result.data.expires_in * 60 * 1000);\r\n    commit(TOKEN_LAST_ACCESS, now);\r\n\r\n    result.last_access = now;\r\n    storeLocal(result);\r\n    router.push({ path: '/' });\r\n    return true;\r\n  } else {\r\n    return result.message ? result.message : 'login_page.errors.login';\r\n  }\r\n};\r\n\r\nexport const logout = ({ commit }) => {\r\n  localStorage.clear();\r\n  commit(RESET_AUTH_STATE);\r\n  RESTClient.setAccessToken();\r\n};\r\n\r\nexport const updateLastAccess = ({ commit }) => {\r\n  let now = new Date().getTime();\r\n  commit(TOKEN_LAST_ACCESS, now);\r\n  localStorage.setItem(LOCAL_STORAGE_LAST_ACCESS, now);\r\n};\r\n\r\nconst storeLocal = reps => {\r\n  localStorage.setItem(\r\n    LOCAL_STORAGE_CURRENT_USER,\r\n    JSON.stringify(reps.data.account)\r\n  );\r\n  localStorage.setItem(LOCAL_STORAGE_ACCESS_TOKEN, reps.data.access_token);\r\n  localStorage.setItem(\r\n    LOCAL_STORAGE_EXPIRES_IN,\r\n    reps.data.expires_in * 60 * 1000\r\n  );\r\n  localStorage.setItem(LOCAL_STORAGE_LAST_ACCESS, reps.last_access);\r\n};\r\n"]}]}