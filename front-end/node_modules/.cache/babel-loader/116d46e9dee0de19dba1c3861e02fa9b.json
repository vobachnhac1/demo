{"remainingRequest":"D:\\demo\\front-end\\node_modules\\babel-loader\\lib\\index.js!D:\\demo\\front-end\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\demo\\front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\demo\\front-end\\src\\components\\commons\\number-text-field.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\demo\\front-end\\src\\components\\commons\\number-text-field.vue","mtime":1556937921688},{"path":"D:\\demo\\front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1556937905901},{"path":"D:\\demo\\front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1556937905542},{"path":"D:\\demo\\front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1556937905901},{"path":"D:\\demo\\front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1556937918662}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.number.max-safe-integer\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  props: {\n    value: {\n      type: Number,\n      default: 0,\n      required: true\n    },\n    type: {\n      type: String,\n      default: 'int',\n      required: false\n    },\n    after: {\n      type: Number,\n      default: 2,\n      required: false\n    },\n    format: {\n      type: String,\n      default: 'en',\n      required: false\n    },\n    label: {\n      type: String,\n      default: '',\n      required: false\n    },\n    placeholder: {\n      type: String,\n      default: '',\n      required: false\n    },\n    icon: {\n      type: String,\n      default: '',\n      required: false\n    }\n  },\n  data: function data() {\n    return {\n      formatVal: '',\n      numberVal: 0\n    };\n  },\n  watch: {\n    value: function value() {\n      this.numberVal = this.value;\n      this.formatVal = this.formatToString(this.value);\n    }\n  },\n  created: function created() {\n    this.numberVal = this.value;\n    this.formatVal = this.formatToString(this.value);\n  },\n  methods: {\n    formatText: function formatText() {\n      if (this.formatVal !== '' || this.formatVal > Number.MAX_SAFE_INTEGER) {\n        try {\n          this.numberVal = this.parse(this.formatVal);\n          this.formatVal = this.formatToString(this.numberVal);\n          this.$emit('input', this.numberVal);\n        } catch (e) {\n          this.formatVal = this.formatToString(this.numberVal);\n        }\n      } else {\n        this.formatVal = this.formatToString(this.numberVal);\n      }\n    },\n    preventText: function preventText(event) {\n      var isPrevent = false;\n\n      switch (this.type) {\n        case 'int':\n          if (!(event.key >= 0 && event.key <= 9 && this.formatVal.length < 15)) {\n            isPrevent = true;\n          }\n\n          break;\n\n        case 'float':\n          if (!((event.key >= 0 && event.key <= 9 || event.key == '.') && this.formatVal.length < 15)) {\n            isPrevent = true;\n          }\n\n          break;\n      }\n\n      if (isPrevent) {\n        event.preventDefault();\n      }\n    },\n    parse: function parse(str) {\n      switch (this.type) {\n        case 'int':\n          return parseInt(str.replace(/[^0-9]/g, ''));\n\n        case 'float':\n          var val = parseFloat(str.replace(/[^0-9.]/g, '')).toFixed(this.after);\n          return parseFloat(val);\n      }\n    },\n    formatToString: function formatToString(val) {\n      switch (this.type) {\n        case 'int':\n          return new Intl.NumberFormat(this.format).format(val);\n\n        case 'float':\n          return val.toFixed(this.after).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\n      }\n    }\n  }\n};",{"version":3,"sources":["number-text-field.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div :class=\"['number_text_filed', icon == '' ? '' : 'show']\">\r\n    <div class=\"icon_format\">{{ icon }}</div>\r\n    <v-text-field\r\n      v-model=\"formatVal\"\r\n      :label=\"label\"\r\n      :placeholder=\"placeholder\"\r\n      @keypress=\"preventText\"\r\n      @blur=\"formatText\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  props: {\r\n    value: {\r\n      type: Number,\r\n      default: 0,\r\n      required: true\r\n    },\r\n\r\n    type: {\r\n      type: String,\r\n      default: 'int',\r\n      required: false\r\n    },\r\n\r\n    after: {\r\n      type: Number,\r\n      default: 2,\r\n      required: false\r\n    },\r\n\r\n    format: {\r\n      type: String,\r\n      default: 'en',\r\n      required: false\r\n    },\r\n\r\n    label: {\r\n      type: String,\r\n      default: '',\r\n      required: false\r\n    },\r\n\r\n    placeholder: {\r\n      type: String,\r\n      default: '',\r\n      required: false\r\n    },\r\n\r\n    icon: {\r\n      type: String,\r\n      default: '',\r\n      required: false\r\n    }\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      formatVal: '',\r\n      numberVal: 0\r\n    };\r\n  },\r\n\r\n  watch: {\r\n    value() {\r\n      this.numberVal = this.value;\r\n      this.formatVal = this.formatToString(this.value);\r\n    }\r\n  },\r\n\r\n  created() {\r\n    this.numberVal = this.value;\r\n    this.formatVal = this.formatToString(this.value);\r\n  },\r\n\r\n  methods: {\r\n    formatText() {\r\n      if (this.formatVal !== '' || this.formatVal > Number.MAX_SAFE_INTEGER) {\r\n        try {\r\n          this.numberVal = this.parse(this.formatVal);\r\n          this.formatVal = this.formatToString(this.numberVal);\r\n          this.$emit('input', this.numberVal);\r\n        } catch (e) {\r\n          this.formatVal = this.formatToString(this.numberVal);\r\n        }\r\n      } else {\r\n        this.formatVal = this.formatToString(this.numberVal);\r\n      }\r\n    },\r\n\r\n    preventText(event) {\r\n      let isPrevent = false;\r\n      switch (this.type) {\r\n        case 'int':\r\n          if (\r\n            !(event.key >= 0 && event.key <= 9 && this.formatVal.length < 15)\r\n          ) {\r\n            isPrevent = true;\r\n          }\r\n          break;\r\n        case 'float':\r\n          if (\r\n            !(\r\n              ((event.key >= 0 && event.key <= 9) || event.key == '.') &&\r\n              this.formatVal.length < 15\r\n            )\r\n          ) {\r\n            isPrevent = true;\r\n          }\r\n          break;\r\n      }\r\n\r\n      if (isPrevent) {\r\n        event.preventDefault();\r\n      }\r\n    },\r\n\r\n    parse(str) {\r\n      switch (this.type) {\r\n        case 'int':\r\n          return parseInt(str.replace(/[^0-9]/g, ''));\r\n        case 'float':\r\n          var val = parseFloat(str.replace(/[^0-9.]/g, '')).toFixed(this.after);\r\n          return parseFloat(val);\r\n      }\r\n    },\r\n\r\n    formatToString(val) {\r\n      switch (this.type) {\r\n        case 'int':\r\n          return new Intl.NumberFormat(this.format).format(val);\r\n        case 'float':\r\n          return val.toFixed(this.after).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n.number_text_filed {\r\n  position: relative;\r\n}\r\n\r\n.number_text_filed .icon_format {\r\n  position: absolute;\r\n  left: 0;\r\n  top: 17px;\r\n  display: none;\r\n}\r\n\r\n.number_text_filed.show .icon_format {\r\n  display: block;\r\n}\r\n\r\n.number_text_filed.show .v-input__control input {\r\n  padding-left: 15px !important;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/commons"}]}