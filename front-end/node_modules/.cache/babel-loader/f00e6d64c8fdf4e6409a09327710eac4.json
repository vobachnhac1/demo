{"remainingRequest":"D:\\Project_Mirea\\risk-box\\front-end\\node_modules\\babel-loader\\lib\\index.js!D:\\Project_Mirea\\risk-box\\front-end\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\Project_Mirea\\risk-box\\front-end\\src\\utilities\\json\\JsonExporter.js","dependencies":[{"path":"D:\\Project_Mirea\\risk-box\\front-end\\src\\utilities\\json\\JsonExporter.js","mtime":1556591576367},{"path":"D:\\Project_Mirea\\risk-box\\front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1556556018404},{"path":"D:\\Project_Mirea\\risk-box\\front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1556555986820},{"path":"D:\\Project_Mirea\\risk-box\\front-end\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1556556014088}],"contextDependencies":[],"result":["import \"core-js/modules/es6.typed.uint8-clamped-array\";\nimport \"core-js/modules/es6.regexp.split\";\nimport _typeof from \"D:\\\\Project_Mirea\\\\risk-box\\\\front-end\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/typeof\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport _defineProperty from \"D:\\\\Project_Mirea\\\\risk-box\\\\front-end\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.function.name\";\nimport _classCallCheck from \"D:\\\\Project_Mirea\\\\risk-box\\\\front-end\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Project_Mirea\\\\risk-box\\\\front-end\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/createClass\";\nimport download from 'downloadjs';\nimport _ from 'lodash';\nvar SUPPORTED_DATA_TYPES = ['String', 'Number'];\n\nvar Exporter =\n/*#__PURE__*/\nfunction () {\n  function Exporter(filename) {\n    _classCallCheck(this, Exporter);\n\n    this.name = filename + '.xls';\n    this.sheets = [];\n  }\n\n  _createClass(Exporter, [{\n    key: \"setFilename\",\n    value: function setFilename(filename) {\n      this.name = filename + '.xls';\n    }\n  }, {\n    key: \"setConfigurations\",\n    value: function setConfigurations(_ref) {\n      var _ref$REPLACE_UNKNOWN_ = _ref.REPLACE_UNKNOWN_TO_EMPTY,\n          REPLACE_UNKNOWN_TO_EMPTY = _ref$REPLACE_UNKNOWN_ === void 0 ? false : _ref$REPLACE_UNKNOWN_,\n          _ref$DECORATE_BORDER = _ref.DECORATE_BORDER,\n          DECORATE_BORDER = _ref$DECORATE_BORDER === void 0 ? false : _ref$DECORATE_BORDER,\n          _ref$DECORATE_HEADER_ = _ref.DECORATE_HEADER_COLOR,\n          DECORATE_HEADER_COLOR = _ref$DECORATE_HEADER_ === void 0 ? '#888888' : _ref$DECORATE_HEADER_;\n      this.custom = {\n        isReplace: REPLACE_UNKNOWN_TO_EMPTY,\n        useBorder: DECORATE_BORDER,\n        headerColor: DECORATE_HEADER_COLOR\n      };\n    }\n    /**\r\n     * @param Array data\r\n     * @param Object headers\r\n     * @param String sheetName\r\n     */\n\n  }, {\n    key: \"addSheet\",\n    value: function addSheet(headers, data, sheetName) {\n      this.sheets.push({\n        data: data,\n        headers: headers,\n        worksheetName: sheetName\n      });\n    }\n  }, {\n    key: \"exportExcel\",\n    value: function exportExcel() {\n      if (this.sheets.length > 0) {\n        try {\n          Transformer.exportToFile(this.sheets, this.name, this.custom);\n          return {\n            success: true,\n            message: 'Exported successfull to ' + this.name\n          };\n        } catch (e) {\n          return {\n            success: false,\n            message: 'The exporting process is failure'\n          };\n        }\n      } else {\n        return {\n          success: false,\n          message: 'Please provide least a sheet.'\n        };\n      }\n    }\n  }]);\n\n  return Exporter;\n}();\n\nexport { Exporter as default };\n\nvar Transformer =\n/*#__PURE__*/\nfunction () {\n  function Transformer() {\n    _classCallCheck(this, Transformer);\n  }\n\n  _createClass(Transformer, null, [{\n    key: \"exportToFile\",\n    value: function exportToFile(json_data, filename, options) {\n      var xls_data = '';\n\n      for (var index in json_data) {\n        var sheet = json_data[index];\n        xls_data += Transformer.addSheet(Transformer.getProcessedJson(sheet.data, sheet.headers), sheet.headers, sheet.worksheetName, options);\n      }\n\n      var prepareString = Transformer.XLS_TEMP_MUTILPLE_SHEET.replace(/\\${borders}/g, options.useBorder ? Transformer.XLS_BORDERS : '');\n      prepareString = prepareString.replace('${header-color}', options.headerColor);\n      var data = prepareString.replace('${xlsData}', xls_data);\n      Transformer.downloadFile(data, filename);\n    }\n  }, {\n    key: \"base64\",\n    value: function base64(s) {\n      return window.btoa(unescape(encodeURIComponent(s)));\n    }\n  }, {\n    key: \"addSheet\",\n    value: function addSheet(data, headers, worksheetName, options) {\n      var table_data = '';\n      var row = '';\n\n      if (data.length > 0) {\n        var isCustomHeader = false; // Table headers\n\n        if (headers) {\n          isCustomHeader = true;\n\n          for (var key in headers) {\n            row += Transformer.combineCellData(headers[key].text, 'header');\n          }\n        } else {\n          for (var _key in data[0]) {\n            row += Transformer.combineCellData(_key, 'header');\n          }\n        }\n\n        table_data += Transformer.XLS_ROW.replace('${data}', row); // Table data rows\n\n        for (var index in data) {\n          row = '';\n          var item = data[index];\n\n          for (var _key2 in item) {\n            if (isCustomHeader) {\n              if (SUPPORTED_DATA_TYPES.includes(headers[_key2].type)) {\n                Object.assign(options, {\n                  type: headers[_key2].type\n                });\n              }\n            }\n\n            row += Transformer.combineCellData(item[_key2], 'data-val', options);\n          }\n\n          table_data += Transformer.XLS_ROW.replace('${data}', row);\n        }\n      } else {\n        if (headers) {\n          for (var _key3 in headers) {\n            row += Transformer.combineCellData(headers[_key3].text, 'header');\n          }\n\n          table_data += Transformer.XLS_ROW.replace('${data}', row);\n        }\n      }\n\n      return Transformer.addColumns(headers).replace('${sheetName}', worksheetName).replace('${data}', table_data);\n    }\n  }, {\n    key: \"addColumns\",\n    value: function addColumns(headers) {\n      var columns_str = '';\n\n      if (headers) {\n        for (var key in headers) {\n          var item = headers[key];\n\n          if (item.width) {\n            columns_str += '<Column ss:Width=\"' + item.width + '\"/>';\n          } else {\n            columns_str += '<Column ss:Width=\"60\"/>';\n          }\n        }\n      }\n\n      return Transformer.XLS_WORKSHEET.replace('${columns}', columns_str);\n    }\n  }, {\n    key: \"combineCellData\",\n    value: function combineCellData(data, sytle, options) {\n      var styleVal = '';\n      var data_type = 'String';\n\n      if (sytle) {\n        styleVal = 'ss:StyleID=\"' + sytle + '\"';\n      }\n\n      if (options) {\n        if (options.isReplace === true && (data == null || data == undefined)) {\n          data = '';\n        }\n\n        if (options.type) {\n          data_type = options.type;\n        }\n      }\n\n      if (data_type == 'String') {\n        data = _.escape(_.trim(data));\n        data = data.replace(/\\\\n/g, '');\n      }\n\n      return Transformer.XLS_CELL.replace('${style}', styleVal).replace('${data}', Transformer.XLS_CELL_DATA.replace('${data}', data).replace('${dataType}', data_type));\n    }\n  }, {\n    key: \"getNestedData\",\n    value: function getNestedData(key, item) {\n      var field = _typeof(key) === 'object' ? key.field : key;\n      var valueFromNestedKey = null;\n      var keyNestedSplit = field.split('.');\n      valueFromNestedKey = item[keyNestedSplit[0]];\n\n      for (var j = 1; j < keyNestedSplit.length; j++) {\n        valueFromNestedKey = valueFromNestedKey[keyNestedSplit[j]];\n      }\n\n      valueFromNestedKey = Transformer.callItemCallback(key, valueFromNestedKey);\n      return valueFromNestedKey;\n    }\n  }, {\n    key: \"parseExtraData\",\n    value: function parseExtraData(extraData, format) {\n      var parseData = '';\n\n      if (Array.isArray(extraData)) {\n        for (var i = 0; i < extraData.length; i++) {\n          parseData += format.replace('${data}', extraData[i]);\n        }\n      } else {\n        parseData += format.replace('${data}', extraData);\n      }\n\n      return parseData;\n    }\n  }, {\n    key: \"callItemCallback\",\n    value: function callItemCallback(field, itemValue) {\n      if (_typeof(field) === 'object' && typeof field.callback === 'function') {\n        return field.callback(itemValue);\n      }\n\n      return itemValue;\n    }\n  }, {\n    key: \"getProcessedJson\",\n    value: function getProcessedJson(data, header) {\n      var keys = Transformer.getKeys(data, header);\n      var newData = [];\n\n      for (var index in data) {\n        var item = data[index];\n        var newItem = {};\n\n        for (var property in keys) {\n          newItem[property] = Transformer.getNestedData(property, item);\n        }\n\n        newData.push(newItem);\n      }\n\n      return newData;\n    }\n  }, {\n    key: \"getKeys\",\n    value: function getKeys(data, header) {\n      if (header) {\n        return header;\n      }\n\n      var keys = {};\n\n      for (var key in data[0]) {\n        keys[key] = key;\n      }\n\n      return keys;\n    }\n  }, {\n    key: \"downloadFile\",\n    value: function downloadFile(data, filename) {\n      var mime = 'data:application/vnd.ms-excel';\n      var base64 = window.btoa(window.unescape(encodeURIComponent(data)));\n      var bstr = atob(base64);\n      var n = bstr.length;\n      var u8arr = new Uint8ClampedArray(n);\n\n      while (n--) {\n        u8arr[n] = bstr.charCodeAt(n);\n      }\n\n      var blobFile = new Blob([u8arr], {\n        type: mime\n      });\n      download(blobFile, filename, mime);\n    }\n  }]);\n\n  return Transformer;\n}();\n\n_defineProperty(Transformer, \"XLS_TEMP_MUTILPLE_SHEET\", '<?xml version=\"1.0\"?><?mso-application progid=\"Excel.Sheet\"?>' + '<Workbook xmlns=\"urn:schemas-microsoft-com:office:spreadsheet\" xmlns:ss=\"urn:schemas-microsoft-com:office:spreadsheet\" xmlns:html=\"http://www.w3.org/TR/REC-html40\">' + '<Styles><Style ss:ID=\"data-val\" ss:Name=\"Normal\">${borders}<Alignment ss:Vertical=\"Center\"/><Font ss:Size=\"11\" /></Style>' + '<Style ss:ID=\"header\">${borders}<Alignment ss:Horizontal=\"Center\"/><Font ss:Color=\"${header-color}\" ss:Size=\"10\" ss:Bold=\"1\"/><Interior/></Style></Styles>' + '${xlsData}</Workbook>');\n\n_defineProperty(Transformer, \"XLS_WORKSHEET\", '<Worksheet ss:Name=\"${sheetName}\"><Table ss:DefaultColumnWidth=\"60\">${columns}${data}</Table></Worksheet>');\n\n_defineProperty(Transformer, \"XLS_ROW\", '<Row>${data}</Row>');\n\n_defineProperty(Transformer, \"XLS_CELL\", '<Cell ${style}>${data}</Cell>');\n\n_defineProperty(Transformer, \"XLS_CELL_DATA\", '<Data ss:Type=\"${dataType}\">${data}</Data>');\n\n_defineProperty(Transformer, \"XLS_BORDERS\", '<Borders>' + '<Border ss:Color=\"#444444\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\" ss:Position=\"Left\"/>' + '<Border ss:Color=\"#444444\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\" ss:Position=\"Right\"/>' + '<Border ss:Color=\"#444444\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\" ss:Position=\"Top\"/>' + '<Border ss:Color=\"#444444\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\" ss:Position=\"Bottom\"/>' + '</Borders>');",{"version":3,"sources":["D:\\Project_Mirea\\risk-box\\front-end\\src\\utilities\\json\\JsonExporter.js"],"names":["download","_","SUPPORTED_DATA_TYPES","Exporter","filename","name","sheets","REPLACE_UNKNOWN_TO_EMPTY","DECORATE_BORDER","DECORATE_HEADER_COLOR","custom","isReplace","useBorder","headerColor","headers","data","sheetName","push","worksheetName","length","Transformer","exportToFile","success","message","e","json_data","options","xls_data","index","sheet","addSheet","getProcessedJson","prepareString","XLS_TEMP_MUTILPLE_SHEET","replace","XLS_BORDERS","downloadFile","s","window","btoa","unescape","encodeURIComponent","table_data","row","isCustomHeader","key","combineCellData","text","XLS_ROW","item","includes","type","Object","assign","addColumns","columns_str","width","XLS_WORKSHEET","sytle","styleVal","data_type","undefined","escape","trim","XLS_CELL","XLS_CELL_DATA","field","valueFromNestedKey","keyNestedSplit","split","j","callItemCallback","extraData","format","parseData","Array","isArray","i","itemValue","callback","header","keys","getKeys","newData","newItem","property","getNestedData","mime","base64","bstr","atob","n","u8arr","Uint8ClampedArray","charCodeAt","blobFile","Blob"],"mappings":"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","sourcesContent":["import download from 'downloadjs';\r\nimport _ from 'lodash';\r\n\r\nconst SUPPORTED_DATA_TYPES = ['String', 'Number'];\r\n\r\nexport default class Exporter {\r\n  constructor(filename) {\r\n    this.name = filename + '.xls';\r\n    this.sheets = [];\r\n  }\r\n\r\n  setFilename(filename) {\r\n    this.name = filename + '.xls';\r\n  }\r\n\r\n  setConfigurations({\r\n    REPLACE_UNKNOWN_TO_EMPTY = false,\r\n    DECORATE_BORDER = false,\r\n    DECORATE_HEADER_COLOR = '#888888'\r\n  }) {\r\n    this.custom = {\r\n      isReplace: REPLACE_UNKNOWN_TO_EMPTY,\r\n      useBorder: DECORATE_BORDER,\r\n      headerColor: DECORATE_HEADER_COLOR\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @param Array data\r\n   * @param Object headers\r\n   * @param String sheetName\r\n   */\r\n  addSheet(headers, data, sheetName) {\r\n    this.sheets.push({\r\n      data: data,\r\n      headers: headers,\r\n      worksheetName: sheetName\r\n    });\r\n  }\r\n\r\n  exportExcel() {\r\n    if (this.sheets.length > 0) {\r\n      try {\r\n        Transformer.exportToFile(this.sheets, this.name, this.custom);\r\n        return {\r\n          success: true,\r\n          message: 'Exported successfull to ' + this.name\r\n        };\r\n      } catch (e) {\r\n        return {\r\n          success: false,\r\n          message: 'The exporting process is failure'\r\n        };\r\n      }\r\n    } else {\r\n      return {\r\n        success: false,\r\n        message: 'Please provide least a sheet.'\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nclass Transformer {\r\n  static XLS_TEMP_MUTILPLE_SHEET =\r\n    '<?xml version=\"1.0\"?><?mso-application progid=\"Excel.Sheet\"?>' +\r\n    '<Workbook xmlns=\"urn:schemas-microsoft-com:office:spreadsheet\" xmlns:ss=\"urn:schemas-microsoft-com:office:spreadsheet\" xmlns:html=\"http://www.w3.org/TR/REC-html40\">' +\r\n    '<Styles><Style ss:ID=\"data-val\" ss:Name=\"Normal\">${borders}<Alignment ss:Vertical=\"Center\"/><Font ss:Size=\"11\" /></Style>' +\r\n    '<Style ss:ID=\"header\">${borders}<Alignment ss:Horizontal=\"Center\"/><Font ss:Color=\"${header-color}\" ss:Size=\"10\" ss:Bold=\"1\"/><Interior/></Style></Styles>' +\r\n    '${xlsData}</Workbook>';\r\n\r\n  static XLS_WORKSHEET =\r\n    '<Worksheet ss:Name=\"${sheetName}\"><Table ss:DefaultColumnWidth=\"60\">${columns}${data}</Table></Worksheet>';\r\n\r\n  static XLS_ROW = '<Row>${data}</Row>';\r\n\r\n  static XLS_CELL = '<Cell ${style}>${data}</Cell>';\r\n\r\n  static XLS_CELL_DATA = '<Data ss:Type=\"${dataType}\">${data}</Data>';\r\n\r\n  static XLS_BORDERS =\r\n    '<Borders>' +\r\n    '<Border ss:Color=\"#444444\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\" ss:Position=\"Left\"/>' +\r\n    '<Border ss:Color=\"#444444\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\" ss:Position=\"Right\"/>' +\r\n    '<Border ss:Color=\"#444444\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\" ss:Position=\"Top\"/>' +\r\n    '<Border ss:Color=\"#444444\" ss:LineStyle=\"Continuous\" ss:Weight=\"1\" ss:Position=\"Bottom\"/>' +\r\n    '</Borders>';\r\n\r\n  static exportToFile(json_data, filename, options) {\r\n    let xls_data = '';\r\n    for (let index in json_data) {\r\n      let sheet = json_data[index];\r\n      xls_data += Transformer.addSheet(\r\n        Transformer.getProcessedJson(sheet.data, sheet.headers),\r\n        sheet.headers,\r\n        sheet.worksheetName,\r\n        options\r\n      );\r\n    }\r\n\r\n    let prepareString = Transformer.XLS_TEMP_MUTILPLE_SHEET.replace(\r\n      /\\${borders}/g,\r\n      options.useBorder ? Transformer.XLS_BORDERS : ''\r\n    );\r\n    prepareString = prepareString.replace(\r\n      '${header-color}',\r\n      options.headerColor\r\n    );\r\n    let data = prepareString.replace('${xlsData}', xls_data);\r\n    Transformer.downloadFile(data, filename);\r\n  }\r\n\r\n  static base64(s) {\r\n    return window.btoa(unescape(encodeURIComponent(s)));\r\n  }\r\n\r\n  static addSheet(data, headers, worksheetName, options) {\r\n    let table_data = '';\r\n    let row = '';\r\n\r\n    if (data.length > 0) {\r\n      let isCustomHeader = false;\r\n      // Table headers\r\n      if (headers) {\r\n        isCustomHeader = true;\r\n        for (let key in headers) {\r\n          row += Transformer.combineCellData(headers[key].text, 'header');\r\n        }\r\n      } else {\r\n        for (let key in data[0]) {\r\n          row += Transformer.combineCellData(key, 'header');\r\n        }\r\n      }\r\n      table_data += Transformer.XLS_ROW.replace('${data}', row);\r\n\r\n      // Table data rows\r\n      for (let index in data) {\r\n        row = '';\r\n        let item = data[index];\r\n        for (let key in item) {\r\n          if (isCustomHeader) {\r\n            if (SUPPORTED_DATA_TYPES.includes(headers[key].type)) {\r\n              Object.assign(options, { type: headers[key].type });\r\n            }\r\n          }\r\n          row += Transformer.combineCellData(item[key], 'data-val', options);\r\n        }\r\n\r\n        table_data += Transformer.XLS_ROW.replace('${data}', row);\r\n      }\r\n    } else {\r\n      if (headers) {\r\n        for (let key in headers) {\r\n          row += Transformer.combineCellData(headers[key].text, 'header');\r\n        }\r\n        table_data += Transformer.XLS_ROW.replace('${data}', row);\r\n      }\r\n    }\r\n\r\n    return Transformer.addColumns(headers)\r\n      .replace('${sheetName}', worksheetName)\r\n      .replace('${data}', table_data);\r\n  }\r\n\r\n  static addColumns(headers) {\r\n    let columns_str = '';\r\n    if (headers) {\r\n      for (let key in headers) {\r\n        let item = headers[key];\r\n        if (item.width) {\r\n          columns_str += '<Column ss:Width=\"' + item.width + '\"/>';\r\n        } else {\r\n          columns_str += '<Column ss:Width=\"60\"/>';\r\n        }\r\n      }\r\n    }\r\n    return Transformer.XLS_WORKSHEET.replace('${columns}', columns_str);\r\n  }\r\n\r\n  static combineCellData(data, sytle, options) {\r\n    let styleVal = '';\r\n    let data_type = 'String';\r\n\r\n    if (sytle) {\r\n      styleVal = 'ss:StyleID=\"' + sytle + '\"';\r\n    }\r\n\r\n    if (options) {\r\n      if (options.isReplace === true && (data == null || data == undefined)) {\r\n        data = '';\r\n      }\r\n\r\n      if (options.type) {\r\n        data_type = options.type;\r\n      }\r\n    }\r\n\r\n    if (data_type == 'String') {\r\n      data = _.escape(_.trim(data));\r\n      data = data.replace(/\\\\n/g, '');\r\n    }\r\n\r\n    return Transformer.XLS_CELL.replace('${style}', styleVal).replace(\r\n      '${data}',\r\n      Transformer.XLS_CELL_DATA.replace('${data}', data).replace(\r\n        '${dataType}',\r\n        data_type\r\n      )\r\n    );\r\n  }\r\n\r\n  static getNestedData(key, item) {\r\n    const field = typeof key === 'object' ? key.field : key;\r\n\r\n    let valueFromNestedKey = null;\r\n    let keyNestedSplit = field.split('.');\r\n\r\n    valueFromNestedKey = item[keyNestedSplit[0]];\r\n    for (let j = 1; j < keyNestedSplit.length; j++) {\r\n      valueFromNestedKey = valueFromNestedKey[keyNestedSplit[j]];\r\n    }\r\n\r\n    valueFromNestedKey = Transformer.callItemCallback(key, valueFromNestedKey);\r\n\r\n    return valueFromNestedKey;\r\n  }\r\n\r\n  static parseExtraData(extraData, format) {\r\n    let parseData = '';\r\n    if (Array.isArray(extraData)) {\r\n      for (var i = 0; i < extraData.length; i++) {\r\n        parseData += format.replace('${data}', extraData[i]);\r\n      }\r\n    } else {\r\n      parseData += format.replace('${data}', extraData);\r\n    }\r\n    return parseData;\r\n  }\r\n\r\n  static callItemCallback(field, itemValue) {\r\n    if (typeof field === 'object' && typeof field.callback === 'function') {\r\n      return field.callback(itemValue);\r\n    }\r\n    return itemValue;\r\n  }\r\n\r\n  static getProcessedJson(data, header) {\r\n    let keys = Transformer.getKeys(data, header);\r\n    let newData = [];\r\n    for (let index in data) {\r\n      let item = data[index];\r\n      let newItem = {};\r\n      for (let property in keys) {\r\n        newItem[property] = Transformer.getNestedData(property, item);\r\n      }\r\n      newData.push(newItem);\r\n    }\r\n\r\n    return newData;\r\n  }\r\n\r\n  static getKeys(data, header) {\r\n    if (header) {\r\n      return header;\r\n    }\r\n\r\n    let keys = {};\r\n    for (let key in data[0]) {\r\n      keys[key] = key;\r\n    }\r\n    return keys;\r\n  }\r\n\r\n  static downloadFile(data, filename) {\r\n    let mime = 'data:application/vnd.ms-excel';\r\n    let base64 = window.btoa(window.unescape(encodeURIComponent(data)));\r\n    let bstr = atob(base64);\r\n    let n = bstr.length;\r\n    let u8arr = new Uint8ClampedArray(n);\r\n    while (n--) {\r\n      u8arr[n] = bstr.charCodeAt(n);\r\n    }\r\n    let blobFile = new Blob([u8arr], { type: mime });\r\n    download(blobFile, filename, mime);\r\n  }\r\n}\r\n"]}]}